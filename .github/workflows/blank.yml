<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <title>Sistema Possatto PRO v8.0 - Gestão Completa</title>
    
    <!-- Bibliotecas externas -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.9.1/dist/chart.min.js"></script>
    
    <style>
        /* Reset e Variáveis CSS */
        :root {
            --primary-color: #2c3e50;
            --secondary-color: #3498db;
            --accent-color: #e74c3c;
            --success-color: #27ae60;
            --warning-color: #f39c12;
            --info-color: #17a2b8;
            --light-bg: #f8f9fa;
            --dark-bg: #34495e;
            --text-color: #2c3e50;
            --border-color: #dee2e6;
            --shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: var(--light-bg);
            color: var(--text-color);
            line-height: 1.6;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 0 15px;
        }

        /* Header com compatibilidade IE */
        .header {
            background: var(--primary-color);
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            padding: 1rem 0;
            box-shadow: var(--shadow);
            position: relative;
            z-index: 1000;
        }

        .header-content {
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex;
            -webkit-box-pack: justify;
            -ms-flex-pack: justify;
            justify-content: space-between;
            -webkit-box-align: center;
            -ms-flex-align: center;
            align-items: center;
            -ms-flex-wrap: wrap;
            flex-wrap: wrap;
        }

        .header-left h1 {
            font-size: 1.8rem;
            font-weight: 600;
            margin-bottom: 0.5rem;
        }

        .header-left .subtitle {
            font-size: 0.9rem;
            opacity: 0.9;
        }

        .header-right {
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex;
            gap: 0.5rem;
            -webkit-box-align: center;
            -ms-flex-align: center;
            align-items: center;
            -ms-flex-wrap: wrap;
            flex-wrap: wrap;
        }

        .backup-buttons {
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex;
            gap: 0.5rem;
        }

        .btn-backup {
            background-color: rgba(255, 255, 255, 0.2);
            color: white;
            border: 1px solid rgba(255, 255, 255, 0.3);
            padding: 0.5rem 1rem;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.8rem;
            transition: all 0.3s ease;
        }

        .btn-backup:hover {
            background-color: rgba(255, 255, 255, 0.3);
            transform: translateY(-1px);
        }

        .status-indicator {
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex;
            -webkit-box-align: center;
            -ms-flex-align: center;
            align-items: center;
            gap: 0.5rem;
            font-size: 0.8rem;
        }

        .status-dot {
            width: 8px;
            height: 8px;
            border-radius: 50%;
            background-color: var(--success-color);
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }

        /* Navigation */
        .nav-tabs {
            background: white;
            border-bottom: 2px solid var(--border-color);
            padding: 0;
            margin: 0;
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex;
            -ms-flex-wrap: wrap;
            flex-wrap: wrap;
            box-shadow: var(--shadow);
        }

        .nav-tab {
            background: none;
            border: none;
            padding: 12px 16px;
            cursor: pointer;
            font-size: 0.9rem;
            color: var(--text-color);
            border-bottom: 3px solid transparent;
            transition: all 0.3s ease;
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex;
            -webkit-box-align: center;
            -ms-flex-align: center;
            align-items: center;
            gap: 8px;
        }

        .nav-tab:hover {
            background-color: var(--light-bg);
            color: var(--secondary-color);
        }

        .nav-tab.active {
            background-color: var(--secondary-color);
            color: white;
            border-bottom-color: var(--accent-color);
        }

        /* Content */
        .content {
            padding: 2rem 0;
        }

        .tab-content {
            display: none;
            animation: fadeIn 0.3s ease-in-out;
        }

        .tab-content.active {
            display: block;
        }

        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(10px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        /* Cards */
        .card {
            background: white;
            border-radius: 8px;
            padding: 1.5rem;
            margin-bottom: 1.5rem;
            box-shadow: var(--shadow);
            border: 1px solid var(--border-color);
        }

        .card-header {
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex;
            -webkit-box-pack: justify;
            -ms-flex-pack: justify;
            justify-content: space-between;
            -webkit-box-align: center;
            -ms-flex-align: center;
            align-items: center;
            margin-bottom: 1rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid var(--border-color);
        }

        .card-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--primary-color);
        }

        /* Forms */
        .form-group {
            margin-bottom: 1rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: var(--text-color);
        }

        .form-control {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid var(--border-color);
            border-radius: 4px;
            font-size: 0.9rem;
            transition: border-color 0.3s ease;
        }

        .form-control:focus {
            outline: none;
            border-color: var(--secondary-color);
            box-shadow: 0 0 0 2px rgba(52, 152, 219, 0.2);
        }

        /* Compatibilidade com IE para date inputs */
        input[type="date"] {
            appearance: none;
            -webkit-appearance: none;
            -moz-appearance: none;
        }

        .form-row {
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex;
            gap: 1rem;
            -ms-flex-wrap: wrap;
            flex-wrap: wrap;
        }

        .form-row .form-group {
            -webkit-box-flex: 1;
            -ms-flex: 1;
            flex: 1;
            min-width: 200px;
        }

        /* Buttons */
        .btn {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 4px;
            font-size: 0.9rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-block;
            text-decoration: none;
        }

        .btn:disabled {
            opacity: 0.6;
            cursor: not-allowed;
        }

        .btn-primary {
            background-color: var(--secondary-color);
            color: white;
        }

        .btn-primary:hover:not(:disabled) {
            background-color: #2980b9;
            transform: translateY(-1px);
        }

        .btn-success {
            background-color: var(--success-color);
            color: white;
        }

        .btn-success:hover:not(:disabled) {
            background-color: #219a52;
        }

        .btn-warning {
            background-color: var(--warning-color);
            color: white;
        }

        .btn-warning:hover:not(:disabled) {
            background-color: #e67e22;
        }

        .btn-danger {
            background-color: var(--accent-color);
            color: white;
        }

        .btn-danger:hover:not(:disabled) {
            background-color: #c0392b;
        }

        .btn-info {
            background-color: var(--info-color);
            color: white;
        }

        .btn-info:hover:not(:disabled) {
            background-color: #138496;
        }

        .btn-secondary {
            background-color: #6c757d;
            color: white;
        }

        .btn-secondary:hover:not(:disabled) {
            background-color: #5a6268;
        }

        .btn-sm {
            padding: 0.5rem 1rem;
            font-size: 0.8rem;
        }

        .btn-group {
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex;
            gap: 0.5rem;
            -ms-flex-wrap: wrap;
            flex-wrap: wrap;
        }

        /* Tables */
        .table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 1rem;
        }

        .table th,
        .table td {
            padding: 0.75rem;
            text-align: left;
            border-bottom: 1px solid var(--border-color);
        }

        .table th {
            background-color: var(--light-bg);
            font-weight: 600;
            color: var(--primary-color);
        }

        .table tbody tr:hover {
            background-color: var(--light-bg);
        }

        /* Stats Cards com Grid compatível */
        .stats-grid {
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex;
            -ms-flex-wrap: wrap;
            flex-wrap: wrap;
            gap: 1rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: white;
            padding: 1.5rem;
            border-radius: 8px;
            box-shadow: var(--shadow);
            text-align: center;
            border-left: 4px solid var(--secondary-color);
            -webkit-box-flex: 1;
            -ms-flex: 1 1 250px;
            flex: 1 1 250px;
            min-width: 250px;
        }

        .stat-card.success {
            border-left-color: var(--success-color);
        }

        .stat-card.warning {
            border-left-color: var(--warning-color);
        }

        .stat-card.danger {
            border-left-color: var(--accent-color);
        }

        .stat-value {
            font-size: 2rem;
            font-weight: 700;
            color: var(--primary-color);
            margin-bottom: 0.5rem;
        }

        .stat-label {
            font-size: 0.9rem;
            color: #6c757d;
            text-transform: uppercase;
            letter-spacing: 0.5px;
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
        }

        .modal.active {
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex;
            -webkit-box-align: center;
            -ms-flex-align: center;
            align-items: center;
            -webkit-box-pack: center;
            -ms-flex-pack: center;
            justify-content: center;
        }

        .modal-content {
            background: white;
            border-radius: 8px;
            padding: 2rem;
            max-width: 900px;
            width: 90%;
            max-height: 85vh;
            overflow-y: auto;
            position: relative;
        }

        .modal-header {
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex;
            -webkit-box-pack: justify;
            -ms-flex-pack: justify;
            justify-content: space-between;
            -webkit-box-align: center;
            -ms-flex-align: center;
            align-items: center;
            margin-bottom: 1rem;
            padding-bottom: 1rem;
            border-bottom: 1px solid var(--border-color);
        }

        .modal-title {
            font-size: 1.2rem;
            font-weight: 600;
            color: var(--primary-color);
        }

        .close-btn {
            background: none;
            border: none;
            font-size: 1.5rem;
            cursor: pointer;
            color: #6c757d;
            padding: 0;
            width: 30px;
            height: 30px;
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex;
            -webkit-box-align: center;
            -ms-flex-align: center;
            align-items: center;
            -webkit-box-pack: center;
            -ms-flex-pack: center;
            justify-content: center;
        }

        .close-btn:hover {
            color: var(--accent-color);
        }

        /* Ambiente Cards */
        .ambiente-card {
            border: 2px solid var(--border-color);
            border-radius: 8px;
            margin-bottom: 1rem;
            background: white;
        }

        .ambiente-header {
            background: var(--primary-color);
            background: linear-gradient(135deg, var(--primary-color), var(--secondary-color));
            color: white;
            padding: 1rem;
            border-radius: 6px 6px 0 0;
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex;
            -webkit-box-pack: justify;
            -ms-flex-pack: justify;
            justify-content: space-between;
            -webkit-box-align: center;
            -ms-flex-align: center;
            align-items: center;
        }

        .ambiente-content {
            padding: 1rem;
        }

        .movel-item {
            background: var(--light-bg);
            border-radius: 6px;
            padding: 1rem;
            margin-bottom: 0.5rem;
            border-left: 4px solid var(--secondary-color);
        }

        .movel-header {
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex;
            -webkit-box-pack: justify;
            -ms-flex-pack: justify;
            justify-content: space-between;
            -webkit-box-align: center;
            -ms-flex-align: center;
            align-items: center;
            margin-bottom: 0.5rem;
        }

        .movel-title {
            font-weight: 600;
            color: var(--primary-color);
        }

        .movel-details {
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex;
            -ms-flex-wrap: wrap;
            flex-wrap: wrap;
            gap: 0.5rem;
            font-size: 0.9rem;
            color: #6c757d;
        }

        .movel-details small {
            min-width: 150px;
        }

        /* Empty State */
        .empty-state {
            text-align: center;
            padding: 3rem;
            color: #6c757d;
        }

        .empty-state h3 {
            margin-bottom: 1rem;
        }

        .empty-state p {
            margin-bottom: 1.5rem;
        }

        /* Material Section */
        .material-section {
            background: var(--light-bg);
            border-radius: 8px;
            padding: 1rem;
            margin-bottom: 1rem;
        }

        .material-item-row {
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex;
            gap: 0.5rem;
            -webkit-box-align: center;
            -ms-flex-align: center;
            align-items: center;
            margin-bottom: 0.5rem;
            padding: 0.5rem;
            background: white;
            border-radius: 4px;
            -ms-flex-wrap: wrap;
            flex-wrap: wrap;
        }

        .material-item-row > * {
            -webkit-box-flex: 1;
            -ms-flex: 1 1 auto;
            flex: 1 1 auto;
            min-width: 100px;
        }

        .material-item-row span {
            min-width: 80px;
            text-align: right;
        }

        /* Base Materiais */
        .base-materiais-tabs {
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex;
            gap: 1rem;
            margin-bottom: 1rem;
            border-bottom: 2px solid var(--border-color);
            -ms-flex-wrap: wrap;
            flex-wrap: wrap;
        }

        .base-tab {
            padding: 0.5rem 1rem;
            background: none;
            border: none;
            cursor: pointer;
            font-weight: 500;
            color: var(--text-color);
            border-bottom: 3px solid transparent;
            transition: all 0.3s;
        }

        .base-tab.active {
            color: var(--secondary-color);
            border-bottom-color: var(--secondary-color);
        }

        .base-content {
            display: none;
        }

        .base-content.active {
            display: block;
        }

        /* Status Badges */
        .status-badge {
            display: inline-block;
            padding: 0.25rem 0.75rem;
            border-radius: 20px;
            font-size: 0.8rem;
            font-weight: 600;
        }

        .status-badge.aguardando {
            background-color: #ffeeba;
            color: #856404;
        }

        .status-badge.aprovado {
            background-color: #c3e6cb;
            color: #155724;
        }

        .status-badge.reprovado {
            background-color: #f5c6cb;
            color: #721c24;
        }

        /* Project Status */
        .projeto-card {
            background: white;
            border-radius: 8px;
            padding: 1.5rem;
            margin-bottom: 1rem;
            box-shadow: var(--shadow);
            border-left: 4px solid var(--secondary-color);
            cursor: pointer;
            transition: transform 0.2s;
        }

        .projeto-card:hover {
            transform: translateX(5px);
        }

        .projeto-card.em-andamento {
            border-left-color: var(--warning-color);
        }

        .projeto-card.concluido {
            border-left-color: var(--success-color);
        }

        .projeto-card.cancelado {
            border-left-color: var(--accent-color);
            opacity: 0.7;
        }

        .etapas-grid {
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex;
            -ms-flex-wrap: wrap;
            flex-wrap: wrap;
            gap: 0.5rem;
            margin-top: 1rem;
        }

        .etapa-item {
            padding: 0.5rem;
            border-radius: 4px;
            font-size: 0.8rem;
            text-align: center;
            cursor: pointer;
            background-color: #ccc;
            color: white;
            min-width: 120px;
            -webkit-box-flex: 1;
            -ms-flex: 1 1 120px;
            flex: 1 1 120px;
        }

        .etapa-item.laranja {
            background-color: var(--warning-color);
        }

        .etapa-item.verde {
            background-color: var(--success-color);
        }

        /* Alert */
        .alert {
            padding: 1rem;
            border-radius: 4px;
            margin-bottom: 1rem;
            border: 1px solid;
        }

        .alert-success {
            background-color: #d4edda;
            border-color: #c3e6cb;
            color: #155724;
        }

        .alert-info {
            background-color: #d1ecf1;
            border-color: #bee5eb;
            color: #0c5460;
        }

        .alert-warning {
            background-color: #fff3cd;
            border-color: #ffeeba;
            color: #856404;
        }

        .alert-danger {
            background-color: #f8d7da;
            border-color: #f5c6cb;
            color: #721c24;
        }

        /* Progress Bar */
        .progress-bar {
            background-color: var(--border-color);
            border-radius: 10px;
            overflow: hidden;
            height: 20px;
            margin-bottom: 1rem;
        }

        .progress-fill {
            height: 100%;
            background: var(--success-color);
            background: linear-gradient(90deg, var(--success-color), var(--secondary-color));
            transition: width 0.3s ease;
        }

        /* Análise de Preços */
        .analise-precos {
            background: var(--light-bg);
            border-radius: 8px;
            padding: 1.5rem;
            margin-top: 1rem;
        }

        .analise-item {
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex;
            -webkit-box-pack: justify;
            -ms-flex-pack: justify;
            justify-content: space-between;
            padding: 0.75rem 0;
            border-bottom: 1px solid var(--border-color);
        }

        .analise-item:last-child {
            border-bottom: none;
            font-weight: bold;
            font-size: 1.1rem;
            color: var(--primary-color);
        }

        /* Logo Upload */
        .logo-upload {
            border: 2px dashed var(--border-color);
            border-radius: 8px;
            padding: 2rem;
            text-align: center;
            margin-bottom: 1rem;
            cursor: pointer;
            transition: all 0.3s;
        }

        .logo-upload:hover {
            border-color: var(--secondary-color);
            background-color: var(--light-bg);
        }

        .logo-preview {
            max-width: 200px;
            max-height: 100px;
            margin: 1rem auto;
        }

        /* Chart Container */
        .chart-container {
            position: relative;
            height: 400px;
            margin: 1rem 0;
        }

        /* Badge */
        .badge {
            display: inline-block;
            padding: 0.25em 0.6em;
            font-size: 0.75em;
            font-weight: 700;
            line-height: 1;
            color: white;
            text-align: center;
            white-space: nowrap;
            vertical-align: baseline;
            border-radius: 0.25rem;
        }

        .badge-success {
            background-color: var(--success-color);
        }

        .badge-warning {
            background-color: var(--warning-color);
        }

        .badge-danger {
            background-color: var(--accent-color);
        }

        .badge-info {
            background-color: var(--info-color);
        }

        .badge-secondary {
            background-color: #6c757d;
        }

        /* Hidden File Input */
        .hidden-file-input {
            position: absolute;
            left: -9999px;
            opacity: 0;
        }

        /* Utilities */
        .mt-3 {
            margin-top: 1rem !important;
        }

        .mt-4 {
            margin-top: 1.5rem !important;
        }

        .mb-3 {
            margin-bottom: 1rem !important;
        }

        .text-muted {
            color: #6c757d !important;
        }

        .text-end {
            text-align: right !important;
        }

        .d-flex {
            display: -webkit-box !important;
            display: -ms-flexbox !important;
            display: flex !important;
        }

        .justify-content-between {
            -webkit-box-pack: justify !important;
            -ms-flex-pack: justify !important;
            justify-content: space-between !important;
        }

        .align-items-center {
            -webkit-box-align: center !important;
            -ms-flex-align: center !important;
            align-items: center !important;
        }

        .align-items-start {
            -webkit-box-align: start !important;
            -ms-flex-align: start !important;
            align-items: flex-start !important;
        }

        /* Folha de Pagamento Styles */
        .funcionario-card {
            background: white;
            border-radius: 8px;
            padding: 1.5rem;
            margin-bottom: 1rem;
            box-shadow: var(--shadow);
            border-left: 4px solid var(--info-color);
        }

        .funcionario-header {
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex;
            -webkit-box-pack: justify;
            -ms-flex-pack: justify;
            justify-content: space-between;
            -webkit-box-align: center;
            -ms-flex-align: center;
            align-items: center;
            margin-bottom: 1rem;
        }

        .funcionario-info {
            display: -webkit-box;
            display: -ms-flexbox;
            display: flex;
            -ms-flex-wrap: wrap;
            flex-wrap: wrap;
            gap: 2rem;
        }

        .info-item {
            min-width: 200px;
        }

        .info-label {
            font-size: 0.8rem;
            color: #6c757d;
            text-transform: uppercase;
        }

        .info-value {
            font-size: 1.1rem;
            font-weight: 600;
            color: var(--primary-color);
        }

        /* Responsive */
        @media (max-width: 768px) {
            .container {
                padding: 0 10px;
            }

            .header-content {
                -webkit-box-orient: vertical;
                -webkit-box-direction: normal;
                -ms-flex-direction: column;
                flex-direction: column;
                gap: 1rem;
            }

            .backup-buttons {
                -webkit-box-ordinal-group: 0;
                -ms-flex-order: -1;
                order: -1;
            }

            .nav-tabs {
                -webkit-box-orient: vertical;
                -webkit-box-direction: normal;
                -ms-flex-direction: column;
                flex-direction: column;
            }

            .nav-tab {
                width: 100%;
                -webkit-box-pack: center;
                -ms-flex-pack: center;
                justify-content: center;
            }

            .form-row {
                -webkit-box-orient: vertical;
                -webkit-box-direction: normal;
                -ms-flex-direction: column;
                flex-direction: column;
            }

            .form-row .form-group {
                min-width: auto;
            }

            .btn-group {
                -webkit-box-orient: vertical;
                -webkit-box-direction: normal;
                -ms-flex-direction: column;
                flex-direction: column;
            }

            .btn-group .btn {
                width: 100%;
                -webkit-box-pack: center;
                -ms-flex-pack: center;
                justify-content: center;
            }

            .stats-grid {
                -webkit-box-orient: vertical;
                -webkit-box-direction: normal;
                -ms-flex-direction: column;
                flex-direction: column;
            }

            .modal-content {
                width: 95%;
                margin: 10px;
            }

            .material-item-row {
                -webkit-box-orient: vertical;
                -webkit-box-direction: normal;
                -ms-flex-direction: column;
                flex-direction: column;
            }

            .material-item-row > * {
                width: 100%;
            }
        }

        /* Print Styles */
        @media print {
            .header, .nav-tabs, .btn, .btn-group {
                display: none !important;
            }

            .card {
                break-inside: avoid;
            }

            body {
                font-size: 12pt;
            }
        }

        /* Loading Spinner */
        .spinner {
            border: 3px solid var(--light-bg);
            border-top: 3px solid var(--secondary-color);
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 20px auto;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        /* Toast Notification */
        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 1rem 1.5rem;
            background: white;
            border-radius: 4px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            z-index: 9999;
            min-width: 300px;
            max-width: 400px;
            animation: slideIn 0.3s ease;
        }

        @keyframes slideIn {
            from {
                transform: translateX(100%);
                opacity: 0;
            }
            to {
                transform: translateX(0);
                opacity: 1;
            }
        }

        .toast.success {
            border-left: 4px solid var(--success-color);
        }

        .toast.error {
            border-left: 4px solid var(--accent-color);
        }

        .toast.warning {
            border-left: 4px solid var(--warning-color);
        }

        .toast.info {
            border-left: 4px solid var(--info-color);
        }

        /* Tooltip */
        .tooltip {
            position: relative;
            display: inline-block;
        }

        .tooltip .tooltiptext {
            visibility: hidden;
            width: 120px;
            background-color: #555;
            color: #fff;
            text-align: center;
            border-radius: 6px;
            padding: 5px;
            position: absolute;
            z-index: 1;
            bottom: 125%;
            left: 50%;
            margin-left: -60px;
            opacity: 0;
            transition: opacity 0.3s;
        }

        .tooltip:hover .tooltiptext {
            visibility: visible;
            opacity: 1;
        }

        /* Accessibility */
        .sr-only {
            position: absolute;
            width: 1px;
            height: 1px;
            padding: 0;
            margin: -1px;
            overflow: hidden;
            clip: rect(0,0,0,0);
            white-space: nowrap;
            border: 0;
        }

        /* Focus Visible */
        :focus-visible {
            outline: 2px solid var(--secondary-color);
            outline-offset: 2px;
        }

        /* Custom Scrollbar */
        ::-webkit-scrollbar {
            width: 10px;
            height: 10px;
        }

        ::-webkit-scrollbar-track {
            background: var(--light-bg);
        }

        ::-webkit-scrollbar-thumb {
            background: #888;
            border-radius: 5px;
        }

        ::-webkit-scrollbar-thumb:hover {
            background: #555;
        }
    </style>
</head>
<body>
    <!-- Header -->
    <header class="header">
        <div class="container">
            <div class="header-content">
                <div class="header-left">
                    <h1>🏗️ Sistema Possatto PRO v8.0</h1>
                    <p class="subtitle">Gestão Completa para Marcenaria</p>
                </div>
                <div class="header-right">
                    <div class="backup-buttons">
                        <button class="btn-backup" onclick="Sistema.exportarBackup()" title="Fazer backup dos dados">
                            💾 Backup
                        </button>
                        <button class="btn-backup" onclick="Sistema.triggerImportBackup()" title="Restaurar backup">
                            📥 Restaurar
                        </button>
                    </div>
                    <div class="status-indicator">
                        <div class="status-dot" id="statusIndicator"></div>
                        <span id="statusText">Sistema Online</span>
                    </div>
                </div>
            </div>
        </div>
    </header>

    <!-- Hidden file input for backup restore -->
    <input type="file" id="backupFileInput" class="hidden-file-input" accept=".json" onchange="Sistema.importarBackup(event)">

    <!-- Navigation -->
    <nav class="nav-tabs">
        <button class="nav-tab active" onclick="Sistema.switchTab('empresa')" data-tab="empresa">
            🏢 Cadastro
        </button>
        <button class="nav-tab" onclick="Sistema.switchTab('orcamento')" data-tab="orcamento">
            📋 Orçamentos
        </button>
        <button class="nav-tab" onclick="Sistema.switchTab('projetos')" data-tab="projetos">
            📁 Projetos
        </button>
        <button class="nav-tab" onclick="Sistema.switchTab('financeiro')" data-tab="financeiro">
            💰 Gestão
        </button>
        <button class="nav-tab" onclick="Sistema.switchTab('fluxocaixa')" data-tab="fluxocaixa">
            💳 Fluxo de Caixa
        </button>
        <button class="nav-tab" onclick="Sistema.switchTab('folhapagamento')" data-tab="folhapagamento">
            👥 Folha de Pagamento
        </button>
        <button class="nav-tab" onclick="Sistema.switchTab('dashboard')" data-tab="dashboard">
            📊 Dashboard
        </button>
    </nav>

    <!-- Main Content -->
    <main class="content">
        <div class="container">
            <!-- TAB: Cadastro -->
            <div id="empresa" class="tab-content active">
                <div class="card">
                    <div class="card-header">
                        <h2 class="card-title">🏢 Dados da Empresa</h2>
                        <div class="btn-group">
                            <button class="btn btn-success" onclick="Empresa.salvarDados()">
                                💾 Salvar Dados
                            </button>
                            <button class="btn btn-warning" onclick="Empresa.editarDados()">
                                ✏️ Editar
                            </button>
                            <button class="btn btn-danger" onclick="Empresa.limparDados()">
                                🗑️ Limpar Tudo
                            </button>
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">Razão Social</label>
                            <input type="text" class="form-control" id="razaoSocial" placeholder="Nome completo da empresa">
                        </div>
                        <div class="form-group">
                            <label class="form-label">CNPJ</label>
                            <input type="text" class="form-control" id="cnpj" placeholder="00.000.000/0000-00">
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="form-label">Endereço Completo</label>
                        <input type="text" class="form-control" id="enderecoEmpresa" placeholder="Rua, número, bairro, cidade, estado, CEP">
                    </div>

                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">Nome do Responsável Legal</label>
                            <input type="text" class="form-control" id="responsavelLegal" placeholder="Nome completo do responsável">
                        </div>
                        <div class="form-group">
                            <label class="form-label">CPF (Responsável)</label>
                            <input type="text" class="form-control" id="cpfResponsavel" placeholder="000.000.000-00">
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="form-label">Endereço (Responsável)</label>
                        <input type="text" class="form-control" id="enderecoResponsavel" placeholder="Endereço do responsável legal">
                    </div>

                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">Telefone</label>
                            <input type="tel" class="form-control" id="telefoneEmpresa" placeholder="(00) 00000-0000">
                        </div>
                        <div class="form-group">
                            <label class="form-label">E-mail</label>
                            <input type="email" class="form-control" id="emailEmpresa" placeholder="contato@empresa.com">
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">Site</label>
                            <input type="url" class="form-control" id="siteEmpresa" placeholder="www.empresa.com.br">
                        </div>
                        <div class="form-group">
                            <label class="form-label">Instagram</label>
                            <input type="text" class="form-control" id="instagramEmpresa" placeholder="@empresa">
                        </div>
                    </div>

                    <!-- Upload de Logo -->
                    <div class="mt-4">
                        <h4>📷 Cadastrar Logo</h4>
                        <div class="logo-upload" onclick="document.getElementById('logoInput').click()">
                            <input type="file" id="logoInput" accept="image/*" style="display: none;" onchange="Empresa.previewLogo(event)">
                            <div id="logoPreview">
                                <p>Clique para fazer upload da logo</p>
                                <small class="text-muted">Formatos aceitos: JPG, PNG, SVG</small>
                            </div>
                        </div>
                    </div>

                    <div class="alert alert-info mt-3">
                        <strong>ℹ️ Observação:</strong> Os dados da empresa e a logo serão utilizados futuramente para gerar PDFs padronizados.
                    </div>
                </div>
            </div>

            <!-- TAB: Orçamentos -->
            <div id="orcamento" class="tab-content">
                <div class="card">
                    <div class="card-header">
                        <h2 class="card-title">📋 Orçamentos</h2>
                        <div class="btn-group">
                            <button class="btn btn-success" onclick="Orcamento.salvar()">
                                💾 Salvar Orçamento
                            </button>
                            <button class="btn btn-info" onclick="Orcamento.gerarCopia()">
                                📋 Gerar Cópia
                            </button>
                            <button class="btn btn-warning" onclick="Orcamento.gerarPDF()">
                                📄 Gerar PDF
                            </button>
                            <button class="btn btn-primary" onclick="Orcamento.gerarContrato()">
                                📑 Gerar Contrato
                            </button>
                        </div>
                    </div>

                    <!-- Dados do Orçamento -->
                    <h4>📝 Dados do Orçamento</h4>
                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">ORC (Gerado automaticamente)</label>
                            <input type="text" class="form-control" id="numeroOrc" readonly placeholder="Será gerado ao salvar">
                        </div>
                        <div class="form-group">
                            <label class="form-label">Nome do Cliente</label>
                            <input type="text" class="form-control" id="nomeCliente" placeholder="Nome completo do cliente">
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">CPF (Cliente)</label>
                            <input type="text" class="form-control" id="cpfCliente" placeholder="000.000.000-00">
                        </div>
                        <div class="form-group">
                            <label class="form-label">Telefone</label>
                            <input type="tel" class="form-control" id="telefoneCliente" placeholder="(00) 00000-0000">
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">Tipo de Projeto</label>
                            <select class="form-control" id="tipoProjeto">
                                <option value="">Selecione o tipo</option>
                                <option value="Cozinha">Cozinha</option>
                                <option value="Quarto">Quarto</option>
                                <option value="Banheiro">Banheiro</option>
                                <option value="Sala">Sala</option>
                                <option value="Lavanderia">Lavanderia</option>
                                <option value="Escritório">Escritório</option>
                                <option value="Sala Comercial">Sala Comercial</option>
                                <option value="Apartamento">Apartamento</option>
                                <option value="Casa">Casa</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Nome do Arquiteto/Projetista</label>
                            <input type="text" class="form-control" id="nomeArquiteto" placeholder="Nome do profissional responsável">
                        </div>
                    </div>

                    <div class="form-row">
                        <div class="form-group">
                            <label class="form-label">Endereço de Entrega</label>
                            <input type="text" class="form-control" id="enderecoEntrega" placeholder="Endereço completo">
                        </div>
                        <div class="form-group">
                            <label class="form-label">Prazo de Entrega</label>
                            <input type="date" class="form-control" id="prazoEntrega">
                        </div>
                    </div>

                    <!-- Ambientes e Móveis -->
                    <div class="mt-4">
                        <div class="d-flex justify-content-between align-items-center mb-3">
                            <h4>🏠 Ambientes e Móveis</h4>
                            <div class="btn-group">
                                <button class="btn btn-primary" onclick="Ambiente.adicionar()">
                                    ➕ Adicionar Ambiente
                                </button>
                                <button class="btn btn-secondary" onclick="BaseMateriais.abrir()">
                                    📦 Base de Materiais
                                </button>
                            </div>
                        </div>
                        <div id="ambientesContainer"></div>
                    </div>

                    <!-- Análise de Preço -->
                    <div class="mt-4">
                        <h4>💰 Análise de Preço</h4>
                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label">Fator Multiplicador</label>
                                <input type="number" class="form-control" id="fatorMultiplicador" value="2.2" step="0.1" min="1" onchange="Orcamento.calcularPrecoVenda()">
                            </div>
                            <div class="form-group">
                                <label class="form-label">% RT (Responsabilidade Técnica)</label>
                                <input type="number" class="form-control" id="percentRT" value="0" step="0.1" min="0" max="100" onchange="Orcamento.calcularPrecoVenda()">
                            </div>
                            <div class="form-group">
                                <label class="form-label">% Adicional</label>
                                <input type="number" class="form-control" id="percentAdicional" value="0" step="0.1" min="0" max="100" onchange="Orcamento.calcularPrecoVenda()">
                            </div>
                        </div>

                        <!-- Mostrar o que foi considerado na formação de preço -->
                        <div class="analise-precos">
                            <h5>📊 Detalhamento da Formação de Preço</h5>
                            <div class="analise-item">
                                <span>Custo Total de Materiais (MDF + Fita + Dobradiças):</span>
                                <span id="custoMateriais">R$ 0,00</span>
                            </div>
                            <div class="analise-item">
                                <span>× Fator Multiplicador (<span id="fatorAtual">2.2</span>):</span>
                                <span id="materiaisComFator">R$ 0,00</span>
                            </div>
                            <div class="analise-item">
                                <span>+ Total de Ferragens (sem fator):</span>
                                <span id="totalFerragens">R$ 0,00</span>
                            </div>
                            <div class="analise-item">
                                <span>+ Total de Acessórios (sem fator):</span>
                                <span id="totalAcessorios">R$ 0,00</span>
                            </div>
                            <div class="analise-item">
                                <span>+ Total de Especiais (sem fator):</span>
                                <span id="totalEspeciais">R$ 0,00</span>
                            </div>
                            <div class="analise-item">
                                <span>Subtotal:</span>
                                <span id="subtotalAntes">R$ 0,00</span>
                            </div>
                            <div class="analise-item">
                                <span>+ RT (<span id="rtPercent">0</span>%):</span>
                                <span id="valorRT">R$ 0,00</span>
                            </div>
                            <div class="analise-item">
                                <span>+ Adicional (<span id="adicionalPercent">0</span>%):</span>
                                <span id="valorAdicional">R$ 0,00</span>
                            </div>
                            <div class="analise-item">
                                <span>VALOR TOTAL DO ORÇAMENTO:</span>
                                <span id="valorVendaFinal">R$ 0,00</span>
                            </div>
                        </div>
                    </div>

                    <!-- Dados da Negociação -->
                    <div class="mt-4">
                        <h4>💳 Dados da Negociação</h4>

                        <!-- Simular forma de pagamento -->
                        <h5>Simular forma de pagamento</h5>
                        <div class="form-row">
                            <div class="form-group">
                                <label class="form-label">À Vista (Desconto %)</label>
                                <select class="form-control" id="descontoAvista" onchange="Orcamento.atualizarSimulacao()">
                                    <option value="0">0%</option>
                                    <option value="5">5%</option>
                                    <option value="10">10%</option>
                                    <option value="15">15%</option>
                                    <option value="20">20%</option>
                                </select>
                                <p class="mt-2">Valor: <strong id="valorAvista">R$ 0,00</strong></p>
                            </div>

                            <div class="form-group">
                                <label class="form-label">Cartão até 12x</label>
                                <select class="form-control" id="parcelasCartao" onchange="Orcamento.atualizarSimulacao()">
                                    <option value="1">1x</option>
                                    <option value="2">2x</option>
                                    <option value="3">3x</option>
                                    <option value="4">4x</option>
                                    <option value="5">5x</option>
                                    <option value="6">6x</option>
                                    <option value="7">7x</option>
                                    <option value="8">8x</option>
                                    <option value="9">9x</option>
                                    <option value="10">10x</option>
                                    <option value="11">11x</option>
                                    <option value="12">12x</option>
                                </select>
                                <label class="form-label mt-2">Taxa %</label>
                                <select class="form-control" id="taxaCartao" onchange="Orcamento.atualizarSimulacao()">
                                    <option value="0">0%</option>
                                    <option value="2">2%</option>
                                    <option value="4">4%</option>
                                    <option value="6">6%</option>
                                    <option value="8">8%</option>
                                    <option value="10">10%</option>
                                </select>
                                <p class="mt-2">Valor Total: <strong id="valorCartao">R$ 0,00</strong></p>
                                <p>Parcela: <strong id="parcelaCartao">R$ 0,00</strong></p>
                            </div>

                            <div class="form-group">
                                <label class="form-label">Boleto até 4x</label>
                                <select class="form-control" id="parcelasBoleto" onchange="Orcamento.atualizarSimulacao()">
                                    <option value="1">1x</option>
                                    <option value="2">2x</option>
                                    <option value="3">3x</option>
                                    <option value="4">4x</option>
                                </select>
                                <label class="form-label mt-2">Taxa %</label>
                                <select class="form-control" id="taxaBoleto" onchange="Orcamento.atualizarSimulacao()">
                                    <option value="0">0%</option>
                                    <option value="2">2%</option>
                                    <option value="4">4%</option>
                                    <option value="6">6%</option>
                                    <option value="8">8%</option>
                                    <option value="10">10%</option>
                                </select>
                                <p class="mt-2">Valor Total: <strong id="valorBoleto">R$ 0,00</strong></p>
                                <p>Parcela: <strong id="parcelaBoleto">R$ 0,00</strong></p>
                            </div>

                            <div class="form-group">
                                <label class="form-label">Entrada + Parcelas (até 4x)</label>
                                <input type="number" class="form-control" id="valorEntrada" placeholder="Valor entrada" step="0.01" onchange="Orcamento.atualizarSimulacao()">
                                <select class="form-control mt-2" id="parcelasEntrada" onchange="Orcamento.atualizarSimulacao()">
                                    <option value="1">1x</option>
                                    <option value="2">2x</option>
                                    <option value="3">3x</option>
                                    <option value="4">4x</option>
                                </select>
                                <p class="mt-2">Valor Restante: <strong id="valorRestante">R$ 0,00</strong></p>
                                <p>Parcela: <strong id="parcelaEntrada">R$ 0,00</strong></p>
                            </div>
                        </div>

                        <!-- Definição da forma de pagamento -->
                        <h5 class="mt-4">Definição da forma de pagamento</h5>
                        <div class="form-group">
                            <label class="form-label">Forma de Pagamento Escolhida</label>
                            <select class="form-control" id="formaPagamentoDefinida" onchange="Orcamento.atualizarResumoPagamento()">
                                <option value="">Selecione</option>
                                <option value="avista">À Vista</option>
                                <option value="cartao">Cartão</option>
                                <option value="boleto">Boleto</option>
                                <option value="entrada">Entrada + Parcelas</option>
                            </select>
                        </div>
                        <div id="resumoPagamento" class="mt-3"></div>
                    </div>

                    <!-- Observações e Condições -->
                    <div class="mt-4">
                        <h4>📝 Observações e Condições</h4>
                        <div class="form-group">
                            <label class="form-label">Matéria Prima Utilizada</label>
                            <input type="text" class="form-control" id="materiaPrima" value="100% MDF dupla face" placeholder="Especifique a matéria prima">
                        </div>
                        <div class="form-group">
                            <label class="form-label">Tempo de Garantia</label>
                            <input type="text" class="form-control" id="tempoGarantia" value="Garantia de 3 anos" placeholder="Ex: Garantia de 3 anos">
                        </div>
                        <div class="form-group">
                            <label class="form-label">Prazo para Entrega</label>
                            <input type="text" class="form-control" id="prazoEntregaObs" placeholder="Ex: 30 dias úteis após aprovação">
                        </div>
                        <div class="form-group">
                            <label class="form-label">Observações Gerais</label>
                            <textarea class="form-control" id="observacoesGerais" rows="3" placeholder="Outras observações importantes..."></textarea>
                        </div>
                    </div>

                    <!-- Histórico de Orçamentos -->
                    <div class="mt-4">
                        <h4>📋 Histórico de Orçamentos</h4>
                        <div id="historicoOrcamentos">
                            <div class="empty-state">
                                <p>Nenhum orçamento salvo ainda.</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- TAB: Projetos -->
            <div id="projetos" class="tab-content">
                <div class="card">
                    <div class="card-header">
                        <h2 class="card-title">📁 Gerenciamento de Projetos</h2>
                        <div class="btn-group">
                            <button class="btn btn-primary" onclick="Projeto.filtrar('todos')">
                                📋 Todos
                            </button>
                            <button class="btn btn-success" onclick="Projeto.filtrar('concluidos')">
                                ✅ Concluídos
                            </button>
                            <button class="btn btn-warning" onclick="Projeto.filtrar('em-andamento')">
                                🚧 Em Andamento
                            </button>
                        </div>
                    </div>

                    <!-- Visão Geral de Projetos -->
                    <div class="stats-grid">
                        <div class="stat-card">
                            <div class="stat-value" id="totalProjetos">0</div>
                            <div class="stat-label">Total de Projetos</div>
                        </div>
                        <div class="stat-card warning">
                            <div class="stat-value" id="projetosAndamento">0</div>
                            <div class="stat-label">Em Andamento</div>
                        </div>
                        <div class="stat-card success">
                            <div class="stat-value" id="projetosConcluidos">0</div>
                            <div class="stat-label">Concluídos</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value" id="valorTotalProjetos">R$ 0,00</div>
                            <div class="stat-label">Valor Total Acumulado</div>
                        </div>
                    </div>

                    <!-- Lista de Projetos -->
                    <div id="listaProjetos" class="mt-4">
                        <div class="empty-state">
                            <h3>Nenhum projeto encontrado</h3>
                            <p>Os orçamentos aprovados aparecerão aqui automaticamente</p>
                        </div>
                    </div>
                </div>
            </div>

            <!-- TAB: Gestão Financeira -->
            <div id="financeiro" class="tab-content">
                <div class="card">
                    <div class="card-header">
                        <h2 class="card-title">💰 Gestão Financeira</h2>
                        <div class="btn-group">
                            <button class="btn btn-primary" onclick="Financeiro.abrirModalDespesa()">
                                ➕ Despesa
                            </button>
                            <button class="btn btn-success" onclick="Financeiro.abrirModalReceita()">
                                💰 Receita
                            </button>
                            <button class="btn btn-info" onclick="Financeiro.abrirModalAnalise()">
                                📊 Análise
                            </button>
                            <button class="btn btn-warning" onclick="Financeiro.gerarRelatorio()">
                                📄 Relatório (PDF)
                            </button>
                        </div>
                    </div>

                    <!-- Painel de Análise -->
                    <div id="analiseResultados" style="display: none;">
                        <!-- Painel Simples -->
                        <div class="stats-grid mb-4">
                            <div class="stat-card success">
                                <div class="stat-value" id="receitaTotal">R$ 0,00</div>
                                <div class="stat-label">Receita Total</div>
                            </div>
                            <div class="stat-card danger">
                                <div class="stat-value" id="despesaTotal">R$ 0,00</div>
                                <div class="stat-label">Despesa Total</div>
                            </div>
                            <div class="stat-card warning">
                                <div class="stat-value" id="margemContribuicao">0%</div>
                                <div class="stat-label">Margem de Contribuição</div>
                            </div>
                            <div class="stat-card">
                                <div class="stat-value" id="lucroEstimado">R$ 0,00</div>
                                <div class="stat-label">Lucro Estimado</div>
                            </div>
                        </div>

                        <!-- Painel Geral -->
                        <div class="card mb-4">
                            <div class="card-header">
                                <h5>📋 Painel Geral de Despesas e Receitas</h5>
                                <div class="form-group" style="max-width: 200px;">
                                    <select class="form-control" id="filtroPeriodo" onchange="Financeiro.filtrarPorPeriodo()">
                                        <option value="">Todos os períodos</option>
                                        <option value="mes">Este mês</option>
                                        <option value="trimestre">Último trimestre</option>
                                        <option value="ano">Este ano</option>
                                    </select>
                                </div>
                            </div>
                            <div class="card-body">
                                <table class="table" id="tabelaTransacoes">
                                    <thead>
                                        <tr>
                                            <th>Tipo</th>
                                            <th>Data</th>
                                            <th>Descrição</th>
                                            <th>Valor</th>
                                            <th>Categoria</th>
                                            <th>Status</th>
                                            <th>Ações</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <!-- Dados serão inseridos dinamicamente -->
                                    </tbody>
                                </table>
                            </div>
                        </div>

                        <!-- Gráficos -->
                        <div class="card">
                            <div class="card-header">
                                <h5>📊 Distribuição de Receitas e Despesas</h5>
                            </div>
                            <div class="card-body">
                                <div class="chart-container">
                                    <canvas id="graficoFinanceiro"></canvas>
                                </div>
                            </div>
                        </div>
                    </div>

                    <!-- Listas de Previsões -->
                    <div class="mt-4">
                        <h4>📅 Previsões</h4>
                        <div class="card">
                            <div class="card-header">
                                <h5>Previsão de Despesas</h5>
                                <button class="btn btn-sm btn-primary" onclick="Financeiro.gerarPrevisaoDespesas()">
                                    🔄 Gerar Previsão
                                </button>
                            </div>
                            <div id="listaPrevisaoDespesas" class="card-body">
                                <p class="text-muted">Clique em "Gerar Previsão" para visualizar</p>
                            </div>
                        </div>

                        <div class="card mt-3">
                            <div class="card-header">
                                <h5>Previsão de Receitas</h5>
                                <button class="btn btn-sm btn-success" onclick="Financeiro.gerarPrevisaoReceitas()">
                                    🔄 Gerar Previsão
                                </button>
                            </div>
                            <div id="listaPrevisaoReceitas" class="card-body">
                                <p class="text-muted">Clique em "Gerar Previsão" para visualizar</p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- TAB: Fluxo de Caixa -->
            <div id="fluxocaixa" class="tab-content">
                <div class="card">
                    <div class="card-header">
                        <h2 class="card-title">💳 Fluxo de Caixa</h2>
                        <div class="btn-group">
                            <button class="btn btn-success" onclick="FluxoCaixa.abrirModalEntrada()">
                                ⬆️ Entrada
                            </button>
                            <button class="btn btn-danger" onclick="FluxoCaixa.abrirModalSaida()">
                                ⬇️ Saída
                            </button>
                            <button class="btn btn-warning" onclick="FluxoCaixa.abrirModalLancamentos()">
                                📝 Lançamentos
                            </button>
                            <button class="btn btn-info" onclick="FluxoCaixa.importarDados()">
                                📊 Importar Dados
                            </button>
                        </div>
                    </div>

                    <!-- Filtros -->
                    <div class="form-row mb-3">
                        <div class="form-group">
                            <label class="form-label">Filtrar por período</label>
                            <select class="form-control" id="filtroFluxoPeriodo" onchange="FluxoCaixa.aplicarFiltros()">
                                <option value="">Todos os períodos</option>
                                <option value="hoje">Hoje</option>
                                <option value="semana">Esta semana</option>
                                <option value="mes">Este mês</option>
                                <option value="ano">Este ano</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label class="form-label">Filtrar por tipo</label>
                            <select class="form-control" id="filtroFluxoTipo" onchange="FluxoCaixa.aplicarFiltros()">
                                <option value="">Todos</option>
                                <option value="entrada">Apenas Entradas</option>
                                <option value="saida">Apenas Saídas</option>
                            </select>
                        </div>
                    </div>

                    <!-- Resumo do Fluxo -->
                    <div class="stats-grid">
                        <div class="stat-card success">
                            <div class="stat-value" id="totalEntradas">R$ 0,00</div>
                            <div class="stat-label">Total de Entradas</div>
                        </div>
                        <div class="stat-card danger">
                            <div class="stat-value" id="totalSaidas">R$ 0,00</div>
                            <div class="stat-label">Total de Saídas</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value" id="saldoAtual">R$ 0,00</div>
                            <div class="stat-label">Saldo Atual</div>
                        </div>
                    </div>

                    <!-- Tabela de Movimentações -->
                    <div class="mt-4">
                        <h4>📋 Movimentações</h4>
                        <table class="table" id="tabelaFluxoCaixa">
                            <thead>
                                <tr>
                                    <th>Data</th>
                                    <th>Descrição</th>
                                    <th>Categoria</th>
                                    <th>Tipo</th>
                                    <th>Valor</th>
                                    <th>Ações</th>
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Dados serão inseridos dinamicamente -->
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- TAB: Folha de Pagamento -->
            <div id="folhapagamento" class="tab-content">
                <div class="card">
                    <div class="card-header">
                        <h2 class="card-title">👥 Folha de Pagamento</h2>
                        <div class="btn-group">
                            <button class="btn btn-primary" onclick="FolhaPagamento.abrirModalFuncionario()">
                                ➕ Funcionário
                            </button>
                            <button class="btn btn-success" onclick="FolhaPagamento.fecharFolha()">
                                💰 Fechar Folha do Mês
                            </button>
                        </div>
                    </div>

                    <!-- Análise Geral da Folha -->
                    <div class="stats-grid">
                        <div class="stat-card">
                            <div class="stat-value" id="numFuncionarios">0</div>
                            <div class="stat-label">N° Funcionários</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value" id="totalSalarios">R$ 0,00</div>
                            <div class="stat-label">Total Salários</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value" id="totalEncargos">R$ 0,00</div>
                            <div class="stat-label">Total Encargos</div>
                        </div>
                        <div class="stat-card warning">
                            <div class="stat-value" id="custoTotalFolha">R$ 0,00</div>
                            <div class="stat-label">Custo Total da Folha</div>
                        </div>
                    </div>

                    <!-- Lista de Funcionários -->
                    <div class="mt-4">
                        <h4>📋 Funcionários Cadastrados</h4>
                        <div id="listaFuncionarios">
                            <div class="empty-state">
                                <p>Nenhum funcionário cadastrado ainda.</p>
                            </div>
                        </div>
                    </div>

                    <!-- Gráfico de Pizza -->
                    <div class="card mt-4">
                        <div class="card-header">
                            <h5>📊 Distribuição de Custos por Funcionário</h5>
                        </div>
                        <div class="card-body">
                            <div class="chart-container" style="height: 300px;">
                                <canvas id="graficoFolha"></canvas>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- TAB: Dashboard -->
            <div id="dashboard" class="tab-content">
                <div class="card">
                    <div class="card-header">
                        <h2 class="card-title">📊 Dashboard Analítico</h2>
                        <div class="btn-group">
                            <button class="btn btn-primary" onclick="Dashboard.atualizar()">
                                🔄 Atualizar
                            </button>
                            <button class="btn btn-success" onclick="Dashboard.adicionarMeta()">
                                🎯 Adicionar Meta
                            </button>
                            <button class="btn btn-warning" onclick="Dashboard.exportarPainel()">
                                📊 Exportar Painel
                            </button>
                        </div>
                    </div>

                    <!-- Período de Análise -->
                    <div class="form-group">
                        <label class="form-label">Período de Análise</label>
                        <select class="form-control" id="periodoDashboard" onchange="Dashboard.atualizar()">
                            <option value="mes">Mês Atual</option>
                            <option value="trimestre">Trimestre</option>
                            <option value="semestre">Semestre</option>
                            <option value="ano">Ano</option>
                        </select>
                    </div>

                    <!-- Indicadores Financeiros -->
                    <div class="stats-grid">
                        <div class="stat-card">
                            <div class="stat-value" id="lucroBruto">R$ 0,00</div>
                            <div class="stat-label">Lucro Bruto</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value" id="margemContribuicaoDash">0%</div>
                            <div class="stat-label">Margem de Contribuição</div>
                        </div>
                        <div class="stat-card success">
                            <div class="stat-value" id="metaMensal">R$ 0,00</div>
                            <div class="stat-label">Meta Mensal</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value" id="receitaTotalDash">R$ 0,00</div>
                            <div class="stat-label">Receita Total</div>
                        </div>
                    </div>

                    <!-- Indicadores de Projetos -->
                    <div class="stats-grid mt-3">
                        <div class="stat-card warning">
                            <div class="stat-value" id="projetosAndamentoDash">0</div>
                            <div class="stat-label">Em Andamento</div>
                        </div>
                        <div class="stat-card success">
                            <div class="stat-value" id="projetosConcluidosPeriodo">0</div>
                            <div class="stat-label">Concluídos no Período</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value" id="ticketMedio">R$ 0,00</div>
                            <div class="stat-label">Ticket Médio</div>
                        </div>
                        <div class="stat-card">
                            <div class="stat-value" id="taxaConversao">0%</div>
                            <div class="stat-label">Taxa de Conversão</div>
                        </div>
                    </div>

                    <!-- Gráfico de Evolução -->
                    <div class="mt-4">
                        <h4>📈 Gráfico de linha Receitas (R$) x Despesas (R$)</h4>
                        <div class="chart-container">
                            <canvas id="graficoEvolucao"></canvas>
                        </div>
                    </div>

                    <!-- Resumo do Período -->
                    <div class="mt-4">
                        <h4>📋 Resumo do Período</h4>
                        <div class="card">
                            <div class="card-body">
                                <h5>Resumo Financeiro</h5>
                                <p>Total de Receitas: <strong id="resumoReceitas">R$ 0,00</strong></p>
                                <p>Total de Despesas: <strong id="resumoDespesas">R$ 0,00</strong></p>
                                <p>Resultado: <strong id="resumoResultado">R$ 0,00</strong></p>

                                <h5 class="mt-3">Estatísticas</h5>
                                <p>Transações de Receita: <strong id="transacoesReceita">0</strong></p>
                                <p>Transações de Despesa: <strong id="transacoesDespesa">0</strong></p>
                                <p>Total de Transações: <strong id="totalTransacoes">0</strong></p>

                                <h5 class="mt-3">Projetos</h5>
                                <p>Em andamento: <strong id="projetosEmAndamento">0</strong></p>
                                <p>Concluídos: <strong id="projetosConcluidosDash">0</strong></p>
                                <p>Cancelados: <strong id="projetosCancelados">0</strong></p>

                                <h5 class="mt-3">Valor Total dos Projetos</h5>
                                <p>Em andamento: <strong id="valorProjetosAndamento">R$ 0,00</strong></p>
                                <p>Concluídos: <strong id="valorProjetosConcluidos">R$ 0,00</strong></p>

                                <h5 class="mt-3">Orçamentos</h5>
                                <p>Aguardando aprovação: <strong id="orcamentosAguardando">0</strong></p>
                                <p>Aprovados: <strong id="orcamentosAprovados">0</strong></p>
                                <p>Reprovados: <strong id="orcamentosReprovados">0</strong></p>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </main>

    <!-- MODAIS -->

    <!-- Modal Base de Materiais -->
    <div id="modalBaseMateriais" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">📦 Base de Materiais</h3>
                <button class="close-btn" onclick="Modal.fechar('modalBaseMateriais')">&times;</button>
            </div>

            <!-- Tabs das categorias -->
            <div class="base-materiais-tabs">
                <button class="base-tab active" onclick="BaseMateriais.mostrarCategoria('materiais')">📦 Materiais</button>
                <button class="base-tab" onclick="BaseMateriais.mostrarCategoria('ferragens')">🔧 Ferragens</button>
                <button class="base-tab" onclick="BaseMateriais.mostrarCategoria('acessorios')">💡 Acessórios</button>
                <button class="base-tab" onclick="BaseMateriais.mostrarCategoria('especiais')">🛠️ Especiais</button>
            </div>

            <!-- Conteúdo das categorias -->
            <div id="baseMateriais" class="base-content active">
                <div class="mb-3">
                    <button class="btn btn-primary btn-sm" onclick="BaseMateriais.adicionarItem('materiais')">
                        ➕ Adicionar Material
                    </button>
                    <button class="btn btn-info btn-sm" onclick="BaseMateriais.importar()">
                        📥 Importar Base
                    </button>
                    <button class="btn btn-success btn-sm" onclick="BaseMateriais.exportar()">
                        📤 Exportar Base
                    </button>
                </div>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Nome</th>
                            <th>Unidade</th>
                            <th>Preço Unit.</th>
                            <th>Ações</th>
                        </tr>
                    </thead>
                    <tbody id="listaMateriais">
                        <!-- Items serão inseridos dinamicamente -->
                    </tbody>
                </table>
            </div>

            <div id="baseFerragens" class="base-content">
                <div class="mb-3">
                    <button class="btn btn-primary btn-sm" onclick="BaseMateriais.adicionarItem('ferragens')">
                        ➕ Adicionar Ferragem
                    </button>
                </div>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Nome</th>
                            <th>Unidade</th>
                            <th>Preço Unit.</th>
                            <th>Ações</th>
                        </tr>
                    </thead>
                    <tbody id="listaFerragens">
                        <!-- Items serão inseridos dinamicamente -->
                    </tbody>
                </table>
            </div>

            <div id="baseAcessorios" class="base-content">
                <div class="mb-3">
                    <button class="btn btn-primary btn-sm" onclick="BaseMateriais.adicionarItem('acessorios')">
                        ➕ Adicionar Acessório
                    </button>
                </div>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Nome</th>
                            <th>Unidade</th>
                            <th>Preço Unit.</th>
                            <th>Ações</th>
                        </tr>
                    </thead>
                    <tbody id="listaAcessorios">
                        <!-- Items serão inseridos dinamicamente -->
                    </tbody>
                </table>
            </div>

            <div id="baseEspeciais" class="base-content">
                <div class="mb-3">
                    <button class="btn btn-primary btn-sm" onclick="BaseMateriais.adicionarItem('especiais')">
                        ➕ Adicionar Especial
                    </button>
                </div>
                <table class="table">
                    <thead>
                        <tr>
                            <th>Nome</th>
                            <th>Unidade</th>
                            <th>Preço Unit.</th>
                            <th>Ações</th>
                        </tr>
                    </thead>
                    <tbody id="listaEspeciais">
                        <!-- Items serão inseridos dinamicamente -->
                    </tbody>
                </table>
            </div>
        </div>
    </div>

    <!-- Modal Ambiente -->
    <div id="modalAmbiente" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">🏠 Adicionar Ambiente</h3>
                <button class="close-btn" onclick="Modal.fechar('modalAmbiente')">&times;</button>
            </div>
            <form id="formAmbiente" onsubmit="Ambiente.salvar(event)">
                <div class="form-group">
                    <label class="form-label">Nome do Ambiente</label>
                    <input type="text" class="form-control" id="nomeAmbiente" required placeholder="Nome do ambiente">
                </div>
                <div class="btn-group">
                    <button type="submit" class="btn btn-primary">💾 Salvar Ambiente</button>
                    <button type="button" class="btn btn-secondary" onclick="Modal.fechar('modalAmbiente')">❌ Cancelar</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Modal Móvel -->
    <div id="modalMovel" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">🪑 Adicionar Móvel</h3>
                <button class="close-btn" onclick="Modal.fechar('modalMovel')">&times;</button>
            </div>
            <form id="formMovel" onsubmit="Movel.salvar(event)">
                <div class="form-group">
                    <label class="form-label">Nome do Móvel</label>
                    <input type="text" class="form-control" id="nomeMovel" required placeholder="Nome do móvel">
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">Largura (cm)</label>
                        <input type="number" class="form-control" id="larguraMovel" min="0" step="0.1" placeholder="0">
                    </div>
                    <div class="form-group">
                        <label class="form-label">Altura (cm)</label>
                        <input type="number" class="form-control" id="alturaMovel" min="0" step="0.1" placeholder="0">
                    </div>
                    <div class="form-group">
                        <label class="form-label">Profundidade (cm)</label>
                        <input type="number" class="form-control" id="profundidadeMovel" min="0" step="0.1" placeholder="0">
                    </div>
                </div>

                <!-- Seções de Materiais -->
                <div class="mt-4">
                    <h5>📦 Materiais</h5>
                    <div id="movelMateriais" class="material-section"></div>
                    <button type="button" class="btn btn-sm btn-secondary" onclick="Movel.adicionarMaterial('materiais')">
                        ➕ Adicionar Material
                    </button>
                </div>

                <div class="mt-4">
                    <h5>🔧 Ferragens</h5>
                    <div id="movelFerragens" class="material-section"></div>
                    <button type="button" class="btn btn-sm btn-secondary" onclick="Movel.adicionarMaterial('ferragens')">
                        ➕ Adicionar Ferragem
                    </button>
                </div>

                <div class="mt-4">
                    <h5>💡 Acessórios</h5>
                    <div id="movelAcessorios" class="material-section"></div>
                    <button type="button" class="btn btn-sm btn-secondary" onclick="Movel.adicionarMaterial('acessorios')">
                        ➕ Adicionar Acessório
                    </button>
                </div>

                <div class="mt-4">
                    <h5>🛠️ Especiais</h5>
                    <div id="movelEspeciais" class="material-section"></div>
                    <button type="button" class="btn btn-sm btn-secondary" onclick="Movel.adicionarMaterial('especiais')">
                        ➕ Adicionar Especial
                    </button>
                </div>

                <div class="form-group mt-4">
                    <label class="form-label">Custo Total do Móvel</label>
                    <input type="text" class="form-control" id="custoTotalMovel" readonly value="R$ 0,00">
                </div>
                <div class="form-group">
                    <label class="form-label">Valor de Venda do Móvel</label>
                    <input type="text" class="form-control" id="valorVendaMovel" readonly value="R$ 0,00">
                </div>

                <div class="btn-group">
                    <button type="submit" class="btn btn-primary">💾 Salvar Móvel</button>
                    <button type="button" class="btn btn-info" onclick="Movel.duplicar()">📋 Duplicar</button>
                    <button type="button" class="btn btn-warning" onclick="Movel.duplicarAnterior()">📋 Duplicar Anterior</button>
                    <button type="button" class="btn btn-secondary" onclick="Modal.fechar('modalMovel')">❌ Cancelar</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Modal Despesa -->
    <div id="modalDespesa" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">💸 Adicionar Despesa</h3>
                <button class="close-btn" onclick="Modal.fechar('modalDespesa')">&times;</button>
            </div>
            <form id="formDespesa" onsubmit="Financeiro.salvarDespesa(event)">
                <div class="form-group">
                    <label class="form-label">Data</label>
                    <input type="date" class="form-control" id="dataDespesa" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Descrição</label>
                    <input type="text" class="form-control" id="descricaoDespesa" required placeholder="Descrição da despesa">
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">Valor</label>
                        <input type="number" class="form-control" id="valorDespesa" step="0.01" min="0" required placeholder="0.00">
                    </div>
                    <div class="form-group">
                        <label class="form-label">Categoria</label>
                        <select class="form-control" id="categoriaDespesa" required>
                            <option value="">Selecione</option>
                            <option value="pontual">Pontual</option>
                            <option value="semanal">Semanal</option>
                            <option value="mensal">Mensal</option>
                            <option value="semestral">Semestral</option>
                            <option value="anual">Anual</option>
                        </select>
                    </div>
                </div>
                <div class="btn-group">
                    <button type="submit" class="btn btn-primary">💾 Salvar</button>
                    <button type="button" class="btn btn-secondary" onclick="Modal.fechar('modalDespesa')">❌ Cancelar</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Modal Receita -->
    <div id="modalReceita" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">💰 Adicionar Receita</h3>
                <button class="close-btn" onclick="Modal.fechar('modalReceita')">&times;</button>
            </div>
            <form id="formReceita" onsubmit="Financeiro.salvarReceita(event)">
                <div class="form-group">
                    <label class="form-label">Data</label>
                    <input type="date" class="form-control" id="dataReceita" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Descrição</label>
                    <input type="text" class="form-control" id="descricaoReceita" required placeholder="Descrição da receita">
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">Valor</label>
                        <input type="number" class="form-control" id="valorReceita" step="0.01" min="0" required placeholder="0.00">
                    </div>
                    <div class="form-group">
                        <label class="form-label">Categoria</label>
                        <select class="form-control" id="categoriaReceita" required>
                            <option value="">Selecione</option>
                            <option value="orcamento">Orçamento</option>
                            <option value="aluguel-bancada">Aluguel de Bancada</option>
                            <option value="pontuais">Pontuais</option>
                        </select>
                    </div>
                </div>
                <div class="btn-group">
                    <button type="submit" class="btn btn-primary">💾 Salvar</button>
                    <button type="button" class="btn btn-secondary" onclick="Modal.fechar('modalReceita')">❌ Cancelar</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Modal Análise -->
    <div id="modalAnalise" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">📊 Análise de Resultados</h3>
                <button class="close-btn" onclick="Modal.fechar('modalAnalise')">&times;</button>
            </div>

            <div class="mb-3">
                <button class="btn btn-primary" onclick="Financeiro.gerarAnalise()">
                    🔄 Gerar Análise
                </button>
            </div>

            <div id="conteudoAnalise">
                <p class="text-muted">Clique em "Gerar Análise" para visualizar os resultados</p>
            </div>

            <div class="btn-group mt-3">
                <button class="btn btn-secondary" onclick="Modal.fechar('modalAnalise')">❌ Fechar</button>
            </div>
        </div>
    </div>

    <!-- Modal Entrada/Saída -->
    <div id="modalFluxo" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title" id="tituloModalFluxo">💰 Movimentação</h3>
                <button class="close-btn" onclick="Modal.fechar('modalFluxo')">&times;</button>
            </div>
            <form id="formFluxo" onsubmit="FluxoCaixa.salvarMovimentacao(event)">
                <input type="hidden" id="tipoMovimentacao">
                <div class="form-group">
                    <label class="form-label">Data</label>
                    <input type="date" class="form-control" id="dataMovimentacao" required>
                </div>
                <div class="form-group">
                    <label class="form-label">Descrição</label>
                    <input type="text" class="form-control" id="descricaoMovimentacao" required placeholder="Descrição da movimentação">
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">Valor</label>
                        <input type="number" class="form-control" id="valorMovimentacao" step="0.01" min="0" required placeholder="0.00">
                    </div>
                    <div class="form-group">
                        <label class="form-label">Categoria</label>
                        <select class="form-control" id="categoriaMovimentacao" required>
                            <option value="">Selecione</option>
                            <option value="orcamento">Orçamento</option>
                            <option value="aluguel-bancada">Aluguel de Bancada</option>
                            <option value="pontuais">Pontuais</option>
                        </select>
                    </div>
                </div>
                <div class="btn-group">
                    <button type="submit" class="btn btn-primary">💾 Salvar</button>
                    <button type="button" class="btn btn-secondary" onclick="Modal.fechar('modalFluxo')">❌ Cancelar</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Modal Lançamentos -->
    <div id="modalLancamentos" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">📝 Lançamentos</h3>
                <button class="close-btn" onclick="Modal.fechar('modalLancamentos')">&times;</button>
            </div>

            <div class="mb-3">
                <button class="btn btn-primary" onclick="FluxoCaixa.carregarListaPrevisoes()">
                    🔄 Carregar Lista de Previsões
                </button>
            </div>

            <div class="card mb-3">
                <div class="card-header">
                    <h5>📋 Lançamento de Despesas Mensal</h5>
                </div>
                <div class="card-body" id="lancamentoDespesas">
                    <p class="text-muted">Carregue as previsões primeiro</p>
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    <h5>💰 Lançamento de Receitas</h5>
                </div>
                <div class="card-body" id="lancamentoReceitas">
                    <p class="text-muted">Carregue as previsões primeiro</p>
                </div>
            </div>

            <div class="btn-group mt-3">
                <button class="btn btn-success" onclick="FluxoCaixa.lancarSelecionados()">✅ Lançar Selecionados</button>
                <button class="btn btn-secondary" onclick="Modal.fechar('modalLancamentos')">❌ Fechar</button>
            </div>
        </div>
    </div>

    <!-- Modal Funcionário -->
    <div id="modalFuncionario" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 class="modal-title">👤 Adicionar Funcionário</h3>
                <button class="close-btn" onclick="Modal.fechar('modalFuncionario')">&times;</button>
            </div>
            <form id="formFuncionario" onsubmit="FolhaPagamento.salvarFuncionario(event)">
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">Nome Completo</label>
                        <input type="text" class="form-control" id="nomeFuncionario" required placeholder="Nome completo">
                    </div>
                    <div class="form-group">
                        <label class="form-label">CPF</label>
                        <input type="text" class="form-control" id="cpfFuncionario" required placeholder="000.000.000-00">
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">Cargo</label>
                        <input type="text" class="form-control" id="cargoFuncionario" required placeholder="Cargo">
                    </div>
                    <div class="form-group">
                        <label class="form-label">Salário Bruto (R$)</label>
                        <input type="number" class="form-control" id="salarioBruto" step="0.01" min="0" required placeholder="0.00">
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">INSS (%)</label>
                        <input type="number" class="form-control" id="inssPercent" step="0.01" min="0" max="100" value="11" placeholder="11">
                    </div>
                    <div class="form-group">
                        <label class="form-label">Vale Transporte (R$)</label>
                        <input type="number" class="form-control" id="valeTransporte" step="0.01" min="0" placeholder="0.00">
                    </div>
                </div>
                <div class="form-row">
                    <div class="form-group">
                        <label class="form-label">Vale Refeição (R$)</label>
                        <input type="number" class="form-control" id="valeRefeicao" step="0.01" min="0" placeholder="0.00">
                    </div>
                    <div class="form-group">
                        <label class="form-label">Outros Benefícios (R$)</label>
                        <input type="number" class="form-control" id="outrosBeneficios" step="0.01" min="0" placeholder="0.00">
                    </div>
                </div>
                <div class="form-group">
                    <label class="form-label">Encargos Adicionais (%)</label>
                    <input type="number" class="form-control" id="encargosAdicionais" step="0.01" min="0" max="100" placeholder="0">
                </div>
                <div class="form-group">
                    <label class="form-label">Custo Total Mensal</label>
                    <input type="text" class="form-control" id="custoTotalFuncionario" readonly value="R$ 0,00">
                </div>
                <div class="btn-group">
                    <button type="submit" class="btn btn-primary">💾 Salvar</button>
                    <button type="button" class="btn btn-secondary" onclick="Modal.fechar('modalFuncionario')">❌ Cancelar</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Modal de Detalhes do Projeto -->
    <div id="modalProjeto" class="modal">
        <!-- Conteúdo será inserido dinamicamente -->
    </div>

    <script>
        // ==================== ESTRUTURA MODULAR DO SISTEMA ====================
        
        // Namespace global do sistema
        window.PossattoSystem = {
            versao: '8.0',
            dados: {
                empresa: {},
                baseMateriais: {
                    materiais: [],
                    ferragens: [],
                    acessorios: [],
                    especiais: []
                },
                ambientes: [],
                orcamentos: [],
                projetos: [],
                despesas: [],
                receitas: [],
                movimentacoes: [],
                funcionarios: []
            },
            config: {
                metaMensal: 0,
                autoSaveInterval: 30000 // 30 segundos
            },
            temp: {
                ultimoMovelAdicionado: null,
                despesasSelecionadas: [],
                receitasSelecionadas: [],
                ambienteAtual: null,
                movelEditando: null
            }
        };

        // ==================== MÓDULO SISTEMA ====================
        const Sistema = {
            init() {
                try {
                    console.log('🏗️ Sistema Possatto PRO v8.0 - Inicializando...');
                    
                    this.carregarDados();
                    this.inicializarModulos();
                    this.configurarEventos();
                    this.configurarAutoSave();
                    this.atualizarInterface();
                    
                    this.atualizarStatus('Sistema carregado com sucesso', 'success');
                    console.log('✅ Sistema iniciado com sucesso!');
                    
                    // Mensagem de boas-vindas
                    if (PossattoSystem.dados.orcamentos.length === 0) {
                        setTimeout(() => {
                            Utils.mostrarAlerta('🎉 Bem-vindo ao Sistema Possatto PRO v8.0!', 'info');
                        }, 2000);
                    }
                } catch (error) {
                    console.error('Erro na inicialização:', error);
                    this.atualizarStatus('Erro na inicialização', 'error');
                }
            },

            inicializarModulos() {
                BaseMateriais.inicializar();
                Empresa.carregar();
                Orcamento.atualizar();
                Projeto.atualizar();
                Financeiro.atualizar();
                FluxoCaixa.atualizar();
                FolhaPagamento.atualizar();
                Dashboard.atualizar();
            },

            configurarEventos() {
                // Prevenir fechamento acidental
                window.addEventListener('beforeunload', (e) => {
                    this.salvarDados();
                });

                // Fechar modais com ESC
                document.addEventListener('keydown', (e) => {
                    if (e.key === 'Escape') {
                        document.querySelectorAll('.modal.active').forEach(modal => {
                            Modal.fechar(modal.id);
                        });
                    }
                    
                    // Salvar com Ctrl+S
                    if (e.ctrlKey && e.key === 's') {
                        e.preventDefault();
                        this.salvarDados();
                        Utils.mostrarAlerta('💾 Dados salvos!', 'success');
                    }
                    
                    // Backup com Ctrl+B
                    if (e.ctrlKey && e.key === 'b') {
                        e.preventDefault();
                        this.exportarBackup();
                    }
                });

                // Clique fora do modal
                window.addEventListener('click', (e) => {
                    if (e.target.classList.contains('modal')) {
                        Modal.fechar(e.target.id);
                    }
                });
            },

            configurarAutoSave() {
                setInterval(() => {
                    this.salvarDados();
                }, PossattoSystem.config.autoSaveInterval);
            },

            salvarDados() {
                try {
                    const dados = {
                        versao: PossattoSystem.versao,
                        ultimoSalvamento: new Date().toISOString(),
                        dados: PossattoSystem.dados,
                        config: PossattoSystem.config
                    };
                    
                    localStorage.setItem('possatto_dados_v8', JSON.stringify(dados));
                    this.atualizarStatus('Dados salvos automaticamente', 'success');
                } catch (error) {
                    console.error('Erro ao salvar dados:', error);
                    this.atualizarStatus('Erro ao salvar dados', 'error');
                }
            },

            carregarDados() {
                try {
                    const dadosSalvos = localStorage.getItem('possatto_dados_v8');
                    
                    if (dadosSalvos) {
                        const parsed = JSON.parse(dadosSalvos);
                        PossattoSystem.dados = parsed.dados || PossattoSystem.dados;
                        PossattoSystem.config = parsed.config || PossattoSystem.config;
                    } else {
                        // Tentar migrar de versões anteriores
                        this.migrarDadosAntigos();
                    }
                    
                    this.atualizarStatus('Dados carregados com sucesso', 'success');
                } catch (error) {
                    console.error('Erro ao carregar dados:', error);
                    this.atualizarStatus('Erro ao carregar dados', 'error');
                }
            },

            migrarDadosAntigos() {
                try {
                    // Tentar v7, v6, v5...
                    for (let v = 7; v >= 5; v--) {
                        const dados = localStorage.getItem(`possatto_dados_v${v}`);
                        if (dados) {
                            const parsed = JSON.parse(dados);
                            // Mapear dados antigos para nova estrutura
                            if (parsed.dadosEmpresa) PossattoSystem.dados.empresa = parsed.dadosEmpresa;
                            if (parsed.baseMateriais) PossattoSystem.dados.baseMateriais = parsed.baseMateriais;
                            if (parsed.ambientes) PossattoSystem.dados.ambientes = parsed.ambientes;
                            if (parsed.orcamentos) PossattoSystem.dados.orcamentos = parsed.orcamentos;
                            if (parsed.projetos) PossattoSystem.dados.projetos = parsed.projetos;
                            if (parsed.despesas) PossattoSystem.dados.despesas = parsed.despesas;
                            if (parsed.receitas) PossattoSystem.dados.receitas = parsed.receitas;
                            if (parsed.movimentacoes) PossattoSystem.dados.movimentacoes = parsed.movimentacoes;
                            
                            this.salvarDados();
                            console.log(`Dados migrados da versão ${v}`);
                            break;
                        }
                    }
                } catch (error) {
                    console.error('Erro na migração:', error);
                }
            },

            atualizarInterface() {
                // Atualizar todas as abas
                Empresa.carregar();
                Ambiente.renderizar();
                Orcamento.renderizarHistorico();
                Projeto.renderizar();
                Financeiro.atualizar();
                FluxoCaixa.atualizar();
                FolhaPagamento.renderizar();
                Dashboard.atualizar();
            },

            switchTab(tabId) {
                // Remover classe ativa
                document.querySelectorAll('.tab-content').forEach(tab => {
                    tab.classList.remove('active');
                });
                document.querySelectorAll('.nav-tab').forEach(tab => {
                    tab.classList.remove('active');
                });
                
                // Ativar tab selecionada
                const tab = document.getElementById(tabId);
                const navTab = document.querySelector(`[data-tab="${tabId}"]`);
                
                if (tab) tab.classList.add('active');
                if (navTab) navTab.classList.add('active');
                
                // Atualizar conteúdo específico
                switch (tabId) {
                    case 'empresa': Empresa.carregar(); break;
                    case 'orcamento': Orcamento.renderizarHistorico(); break;
                    case 'projetos': Projeto.atualizar(); break;
                    case 'financeiro': Financeiro.atualizar(); break;
                    case 'fluxocaixa': FluxoCaixa.atualizar(); break;
                    case 'folhapagamento': FolhaPagamento.atualizar(); break;
                    case 'dashboard': Dashboard.atualizar(); break;
                }
            },

            exportarBackup() {
                try {
                    const dados = {
                        versao: PossattoSystem.versao,
                        dataBackup: new Date().toISOString(),
                        sistema: PossattoSystem
                    };
                    
                    const blob = new Blob([JSON.stringify(dados, null, 2)], { type: 'application/json' });
                    const url = URL.createObjectURL(blob);
                    const link = document.createElement('a');
                    link.href = url;
                    link.download = `possatto-backup-${Utils.formatarDataArquivo()}.json`;
                    document.body.appendChild(link);
                    link.click();
                    document.body.removeChild(link);
                    URL.revokeObjectURL(url);
                    
                    Utils.mostrarAlerta('💾 Backup exportado com sucesso!', 'success');
                } catch (error) {
                    console.error('Erro ao exportar backup:', error);
                    Utils.mostrarAlerta('❌ Erro ao criar backup', 'danger');
                }
            },

            triggerImportBackup() {
                document.getElementById('backupFileInput').click();
            },

            importarBackup(event) {
                const file = event.target.files[0];
                if (!file) return;
                
                const reader = new FileReader();
                reader.onload = (e) => {
                    try {
                        const dados = JSON.parse(e.target.result);
                        
                        if (!dados.versao || !dados.dataBackup) {
                            throw new Error('Arquivo de backup inválido');
                        }
                        
                        if (confirm(`Confirma a restauração do backup?\nVersão: ${dados.versao}\nData: ${Utils.formatarData(dados.dataBackup)}\n\n⚠️ Todos os dados atuais serão substituídos!`)) {
                            PossattoSystem.dados = dados.sistema.dados;
                            PossattoSystem.config = dados.sistema.config;
                            this.salvarDados();
                            this.atualizarInterface();
                            Utils.mostrarAlerta('✅ Backup restaurado com sucesso!', 'success');
                        }
                    } catch (error) {
                        console.error('Erro ao processar backup:', error);
                        Utils.mostrarAlerta('❌ Arquivo de backup inválido', 'danger');
                    }
                };
                reader.readAsText(file);
                event.target.value = '';
            },

            atualizarStatus(mensagem, tipo) {
                const statusText = document.getElementById('statusText');
                const statusIndicator = document.getElementById('statusIndicator');
                
                if (statusText) statusText.textContent = mensagem;
                if (statusIndicator) {
                    statusIndicator.style.backgroundColor = 
                        tipo === 'error' ? '#e74c3c' :
                        tipo === 'warning' ? '#f39c12' : '#27ae60';
                }
            }
        };

        // ==================== MÓDULO UTILS ====================
        const Utils = {
            formatarData(data) {
                if (!data) return '';
                const d = new Date(data);
                return d.toLocaleDateString('pt-BR');
            },

            formatarDataArquivo() {
                return new Date().toISOString().split('T')[0];
            },

            formatarMoeda(valor) {
                return new Intl.NumberFormat('pt-BR', {
                    style: 'currency',
                    currency: 'BRL'
                }).format(valor || 0);
            },

            mostrarAlerta(mensagem, tipo = 'info') {
                // Remover alertas anteriores
                document.querySelectorAll('.toast').forEach(t => t.remove());
                
                const toast = document.createElement('div');
                toast.className = `toast ${tipo}`;
                toast.textContent = mensagem;
                document.body.appendChild(toast);
                
                setTimeout(() => toast.remove(), 3000);
            },

            gerarId() {
                return Date.now() + Math.random();
            },

            validarCPF(cpf) {
                cpf = cpf.replace(/[^\d]/g, '');
                if (cpf.length !== 11) return false;
                
                // Validação simples
                let soma = 0;
                for (let i = 0; i < 9; i++) {
                    soma += parseInt(cpf[i]) * (10 - i);
                }
                let resto = (soma * 10) % 11;
                if (resto === 10 || resto === 11) resto = 0;
                if (resto !== parseInt(cpf[9])) return false;
                
                soma = 0;
                for (let i = 0; i < 10; i++) {
                    soma += parseInt(cpf[i]) * (11 - i);
                }
                resto = (soma * 10) % 11;
                if (resto === 10 || resto === 11) resto = 0;
                if (resto !== parseInt(cpf[10])) return false;
                
                return true;
            },

            validarCNPJ(cnpj) {
                cnpj = cnpj.replace(/[^\d]/g, '');
                if (cnpj.length !== 14) return false;
                
                // Validação simplificada
                return true;
            },

            mascaraCPF(cpf) {
                return cpf.replace(/(\d{3})(\d{3})(\d{3})(\d{2})/, '$1.$2.$3-$4');
            },

            mascaraCNPJ(cnpj) {
                return cnpj.replace(/(\d{2})(\d{3})(\d{3})(\d{4})(\d{2})/, '$1.$2.$3/$4-$5');
            },

            mascaraTelefone(telefone) {
                return telefone.replace(/(\d{2})(\d{5})(\d{4})/, '($1) $2-$3');
            },

            debounce(func, wait) {
                let timeout;
                return function executedFunction(...args) {
                    const later = () => {
                        clearTimeout(timeout);
                        func(...args);
                    };
                    clearTimeout(timeout);
                    timeout = setTimeout(later, wait);
                };
            }
        };

        // ==================== MÓDULO MODAL ====================
        const Modal = {
            abrir(modalId) {
                const modal = document.getElementById(modalId);
                if (modal) modal.classList.add('active');
            },

            fechar(modalId) {
                const modal = document.getElementById(modalId);
                if (modal) {
                    modal.classList.remove('active');
                    // Limpar formulários se houver
                    const form = modal.querySelector('form');
                    if (form) form.reset();
                }
            },

            confirmar(mensagem) {
                return confirm(mensagem);
            }
        };

        // ==================== MÓDULO EMPRESA ====================
        const Empresa = {
            salvarDados() {
                try {
                    PossattoSystem.dados.empresa = {
                        razaoSocial: document.getElementById('razaoSocial').value,
                        cnpj: document.getElementById('cnpj').value,
                        endereco: document.getElementById('enderecoEmpresa').value,
                        responsavel: document.getElementById('responsavelLegal').value,
                        cpfResponsavel: document.getElementById('cpfResponsavel').value,
                        enderecoResponsavel: document.getElementById('enderecoResponsavel').value,
                        telefone: document.getElementById('telefoneEmpresa').value,
                        email: document.getElementById('emailEmpresa').value,
                        site: document.getElementById('siteEmpresa').value,
                        instagram: document.getElementById('instagramEmpresa').value,
                        logo: document.getElementById('logoPreview').innerHTML
                    };
                    
                    Sistema.salvarDados();
                    Utils.mostrarAlerta('✅ Dados da empresa salvos!', 'success');
                } catch (error) {
                    console.error('Erro ao salvar empresa:', error);
                    Utils.mostrarAlerta('❌ Erro ao salvar dados', 'danger');
                }
            },

            editarDados() {
                document.querySelectorAll('#empresa input').forEach(input => {
                    input.removeAttribute('readonly');
                });
                Utils.mostrarAlerta('✏️ Modo de edição ativado', 'info');
            },

            limparDados() {
                if (!Modal.confirmar('Deseja realmente limpar todos os dados da empresa?')) return;
                
                document.querySelectorAll('#empresa input').forEach(input => {
                    input.value = '';
                });
                document.getElementById('logoPreview').innerHTML = 
                    '<p>Clique para fazer upload da logo</p><small class="text-muted">Formatos aceitos: JPG, PNG, SVG</small>';
                
                PossattoSystem.dados.empresa = {};
                Sistema.salvarDados();
                Utils.mostrarAlerta('🗑️ Dados limpos!', 'warning');
            },

            carregar() {
                const empresa = PossattoSystem.dados.empresa;
                if (!empresa) return;
                
                const campos = {
                    'razaoSocial': empresa.razaoSocial,
                    'cnpj': empresa.cnpj,
                    'enderecoEmpresa': empresa.endereco,
                    'responsavelLegal': empresa.responsavel,
                    'cpfResponsavel': empresa.cpfResponsavel,
                    'enderecoResponsavel': empresa.enderecoResponsavel,
                    'telefoneEmpresa': empresa.telefone,
                    'emailEmpresa': empresa.email,
                    'siteEmpresa': empresa.site,
                    'instagramEmpresa': empresa.instagram
                };
                
                for (const [id, valor] of Object.entries(campos)) {
                    const element = document.getElementById(id);
                    if (element && valor) element.value = valor;
                }
                
                if (empresa.logo) {
                    document.getElementById('logoPreview').innerHTML = empresa.logo;
                }
            },

            previewLogo(event) {
                const file = event.target.files[0];
                if (!file) return;
                
                const reader = new FileReader();
                reader.onload = (e) => {
                    document.getElementById('logoPreview').innerHTML = 
                        `<img src="${e.target.result}" class="logo-preview" alt="Logo">`;
                };
                reader.readAsDataURL(file);
            }
        };

        // ==================== MÓDULO BASE MATERIAIS ====================
        const BaseMateriais = {
            inicializar() {
                const base = PossattoSystem.dados.baseMateriais;
                return Object.values(base).every(cat => cat.length === 0);
            },

            criarBasePadrao() {
                PossattoSystem.dados.baseMateriais = {
                    materiais: [
                        { id: 1, nome: 'MDF 15mm', unidade: 'm²', preco: 85 },
                        { id: 2, nome: 'MDF 18mm', unidade: 'm²', preco: 95 },
                        { id: 3, nome: 'MDF 25mm', unidade: 'm²', preco: 120 },
                        { id: 4, nome: 'Fita de Borda PVC', unidade: 'm', preco: 1.50 },
                        { id: 5, nome: 'Fita de Borda ABS', unidade: 'm', preco: 2.50 },
                        { id: 6, nome: 'Dobradiça 35mm', unidade: 'un', preco: 3.50 },
                        { id: 7, nome: 'Corrediça Telescópica', unidade: 'par', preco: 25 },
                        { id: 8, nome: 'Pistão a Gás', unidade: 'un', preco: 35 }
                    ],
                    ferragens: [
                        { id: 9, nome: 'Puxador Inox 128mm', unidade: 'un', preco: 12 },
                        { id: 10, nome: 'Puxador Inox 160mm', unidade: 'un', preco: 15 },
                        { id: 11, nome: 'Sistema Correr Superior', unidade: 'kit', preco: 180 },
                        { id: 12, nome: 'Articulador de Porta', unidade: 'un', preco: 85 }
                    ],
                    acessorios: [
                        { id: 13, nome: 'LED Fita 5m', unidade: 'un', preco: 45 },
                        { id: 14, nome: 'Tomada Embutir', unidade: 'un', preco: 15 },
                        { id: 15, nome: 'Interruptor Touch', unidade: 'un', preco: 35 }
                    ],
                    especiais: [
                        { id: 16, nome: 'Espelho 4mm', unidade: 'm²', preco: 120 },
                        { id: 17, nome: 'Vidro Temperado 8mm', unidade: 'm²', preco: 180 },
                        { id: 18, nome: 'Serralheria Sob Medida', unidade: 'm²', preco: 350 },
                        { id: 19, nome: 'Pintura Laca', unidade: 'm²', preco: 65 },
                        { id: 20, nome: 'Metalon 20x20', unidade: 'm', preco: 15 },
                        { id: 21, nome: 'Soldagem Especializada', unidade: 'h', preco: 80 }
                    ]
                };
                Sistema.salvarDados();
            },

            abrir() {
                this.renderizar();
                Modal.abrir('modalBaseMateriais');
            },

            mostrarCategoria(categoria) {
                // Esconder todas
                document.querySelectorAll('.base-content').forEach(content => {
                    content.classList.remove('active');
                });
                document.querySelectorAll('.base-tab').forEach(tab => {
                    tab.classList.remove('active');
                });
                
                // Mostrar selecionada
                const content = document.getElementById('base' + categoria.charAt(0).toUpperCase() + categoria.slice(1));
                if (content) content.classList.add('active');
                
                if (event && event.target) {
                    event.target.classList.add('active');
                }
                
                this.renderizar();
            },

            renderizar() {
                ['materiais', 'ferragens', 'acessorios', 'especiais'].forEach(categoria => {
                    const tbody = document.getElementById('lista' + categoria.charAt(0).toUpperCase() + categoria.slice(1));
                    if (!tbody) return;
                    
                    const items = PossattoSystem.dados.baseMateriais[categoria] || [];
                    
                    if (items.length === 0) {
                        tbody.innerHTML = '<tr><td colspan="4" class="text-center text-muted">Nenhum item cadastrado</td></tr>';
                    } else {
                        tbody.innerHTML = items.map(item => `
                            <tr>
                                <td>${item.nome}</td>
                                <td>${item.unidade}</td>
                                <td>${Utils.formatarMoeda(item.preco)}</td>
                                <td>
                                    <button class="btn btn-sm btn-warning" onclick="BaseMateriais.editarItem('${categoria}', ${item.id})">✏️</button>
                                    <button class="btn btn-sm btn-danger" onclick="BaseMateriais.apagarItem('${categoria}', ${item.id})">🗑️</button>
                                    <button class="btn btn-sm btn-info" onclick="BaseMateriais.duplicarItem('${categoria}', ${item.id})">📋</button>
                                </td>
                            </tr>
                        `).join('');
                    }
                });
            },

            adicionarItem(categoria) {
                const nome = prompt('Nome do item:');
                if (!nome) return;
                
                const unidade = prompt('Unidade de medida:');
                if (!unidade) return;
                
                const precoStr = prompt('Preço unitário:');
                const preco = parseFloat(precoStr);
                if (isNaN(preco)) return;
                
                const novoItem = {
                    id: Utils.gerarId(),
                    nome: nome,
                    unidade: unidade,
                    preco: preco
                };
                
                PossattoSystem.dados.baseMateriais[categoria].push(novoItem);
                Sistema.salvarDados();
                this.renderizar();
                Utils.mostrarAlerta('✅ Item adicionado!', 'success');
            },

            editarItem(categoria, id) {
                const item = PossattoSystem.dados.baseMateriais[categoria].find(i => i.id === id);
                if (!item) return;
                
                const nome = prompt('Nome do item:', item.nome);
                if (nome !== null) item.nome = nome;
                
                const unidade = prompt('Unidade de medida:', item.unidade);
                if (unidade !== null) item.unidade = unidade;
                
                const precoStr = prompt('Preço unitário:', item.preco);
                const preco = parseFloat(precoStr);
                if (!isNaN(preco)) item.preco = preco;
                
                Sistema.salvarDados();
                this.renderizar();
                Utils.mostrarAlerta('✅ Item atualizado!', 'success');
            },

            apagarItem(categoria, id) {
                if (!Modal.confirmar('Deseja realmente apagar este item?')) return;
                
                PossattoSystem.dados.baseMateriais[categoria] = 
                    PossattoSystem.dados.baseMateriais[categoria].filter(i => i.id !== id);
                
                Sistema.salvarDados();
                this.renderizar();
                Utils.mostrarAlerta('🗑️ Item removido!', 'warning');
            },

            duplicarItem(categoria, id) {
                const item = PossattoSystem.dados.baseMateriais[categoria].find(i => i.id === id);
                if (!item) return;
                
                const novoItem = {
                    ...item,
                    id: Utils.gerarId(),
                    nome: item.nome + ' (Cópia)'
                };
                
                PossattoSystem.dados.baseMateriais[categoria].push(novoItem);
                Sistema.salvarDados();
                this.renderizar();
                Utils.mostrarAlerta('📋 Item duplicado!', 'success');
            },

            importar() {
                const input = document.createElement('input');
                input.type = 'file';
                input.accept = '.json,.xlsx,.csv';
                input.onchange = (e) => {
                    const file = e.target.files[0];
                    if (!file) return;
                    
                    if (file.name.endsWith('.json')) {
                        const reader = new FileReader();
                        reader.onload = (e) => {
                            try {
                                const dados = JSON.parse(e.target.result);
                                PossattoSystem.dados.baseMateriais = dados;
                                Sistema.salvarDados();
                                this.renderizar();
                                Utils.mostrarAlerta('✅ Base importada!', 'success');
                            } catch (error) {
                                Utils.mostrarAlerta('❌ Erro ao importar', 'danger');
                            }
                        };
                        reader.readAsText(file);
                    } else {
                        Utils.mostrarAlerta('🚧 Formato ainda não implementado', 'info');
                    }
                };
                input.click();
            },

            exportar() {
                const blob = new Blob([JSON.stringify(PossattoSystem.dados.baseMateriais, null, 2)], 
                    { type: 'application/json' });
                const url = URL.createObjectURL(blob);
                const link = document.createElement('a');
                link.href = url;
                link.download = 'base_materiais.json';
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
                URL.revokeObjectURL(url);
                Utils.mostrarAlerta('📤 Base exportada!', 'success');
            }
        };

        // ==================== MÓDULO AMBIENTE ====================
        const Ambiente = {
            adicionar() {
                Modal.abrir('modalAmbiente');
            },

            salvar(event) {
                event.preventDefault();
                
                const nome = document.getElementById('nomeAmbiente').value;
                if (!nome) {
                    Utils.mostrarAlerta('⚠️ Preencha o nome do ambiente', 'warning');
                    return;
                }
                
                const novoAmbiente = {
                    id: Utils.gerarId(),
                    nome: nome,
                    moveis: [],
                    custoTotal: 0,
                    valorVendaTotal: 0
                };
                
                PossattoSystem.dados.ambientes.push(novoAmbiente);
                Sistema.salvarDados();
                this.renderizar();
                Modal.fechar('modalAmbiente');
                Utils.mostrarAlerta('✅ Ambiente adicionado!', 'success');
            },

            renderizar() {
                const container = document.getElementById('ambientesContainer');
                if (!container) return;
                
                const ambientes = PossattoSystem.dados.ambientes;
                
                if (ambientes.length === 0) {
                    container.innerHTML = '<div class="empty-state"><p>Nenhum ambiente adicionado ainda.</p></div>';
                    return;
                }
                
                container.innerHTML = ambientes.map(ambiente => `
                    <div class="ambiente-card">
                        <div class="ambiente-header">
                            <h5>${ambiente.nome}</h5>
                            <div>
                                <span class="badge badge-info">Custo: ${Utils.formatarMoeda(ambiente.custoTotal)}</span>
                                <span class="badge badge-success">Venda: ${Utils.formatarMoeda(ambiente.valorVendaTotal)}</span>
                                <button class="btn btn-sm btn-primary" onclick="Movel.adicionar(${ambiente.id})">➕ Móvel</button>
                                <button class="btn btn-sm btn-info" onclick="Ambiente.duplicar(${ambiente.id})">📋</button>
                                <button class="btn btn-sm btn-danger" onclick="Ambiente.apagar(${ambiente.id})">🗑️</button>
                            </div>
                        </div>
                        <div class="ambiente-content">
                            ${ambiente.moveis.length === 0 ? 
                                '<p class="text-muted">Nenhum móvel adicionado ainda.</p>' :
                                ambiente.moveis.map(movel => this.renderizarMovel(movel, ambiente.id)).join('')
                            }
                        </div>
                    </div>
                `).join('');
            },

            renderizarMovel(movel, ambienteId) {
                return `
                    <div class="movel-item">
                        <div class="movel-header">
                            <span class="movel-title">${movel.nome}</span>
                            <div>
                                <span class="badge badge-secondary">Custo: ${Utils.formatarMoeda(movel.custoTotal)}</span>
                                <span class="badge badge-success">Venda: ${Utils.formatarMoeda(movel.valorVenda)}</span>
                                <button class="btn btn-sm btn-warning" onclick="Movel.editar(${ambienteId}, ${movel.id})">✏️</button>
                                <button class="btn btn-sm btn-info" onclick="Movel.duplicarNoAmbiente(${ambienteId}, ${movel.id})">📋</button>
                                <button class="btn btn-sm btn-danger" onclick="Movel.apagar(${ambienteId}, ${movel.id})">🗑️</button>
                            </div>
                        </div>
                        <div class="movel-details">
                            <small>Dimensões: ${movel.largura}×${movel.altura}×${movel.profundidade} cm</small>
                            <small>Materiais: ${Utils.formatarMoeda(movel.totalMateriais)}</small>
                            <small>Ferragens: ${Utils.formatarMoeda(movel.totalFerragens)}</small>
                            <small>Acessórios: ${Utils.formatarMoeda(movel.totalAcessorios)}</small>
                            <small>Especiais: ${Utils.formatarMoeda(movel.totalEspeciais)}</small>
                        </div>
                    </div>
                `;
            },

            duplicar(ambienteId) {
                const ambiente = PossattoSystem.dados.ambientes.find(a => a.id === ambienteId);
                if (!ambiente) return;
                
                const novoAmbiente = {
                    id: Utils.gerarId(),
                    nome: ambiente.nome + ' (Cópia)',
                    moveis: ambiente.moveis.map(m => ({
                        ...m,
                        id: Utils.gerarId()
                    })),
                    custoTotal: ambiente.custoTotal,
                    valorVendaTotal: ambiente.valorVendaTotal
                };
                
                PossattoSystem.dados.ambientes.push(novoAmbiente);
                Sistema.salvarDados();
                this.renderizar();
                Orcamento.calcularPrecoVenda();
                Utils.mostrarAlerta('📋 Ambiente duplicado!', 'success');
            },

            apagar(ambienteId) {
                if (!Modal.confirmar('Deseja realmente apagar este ambiente e todos os seus móveis?')) return;
                
                PossattoSystem.dados.ambientes = 
                    PossattoSystem.dados.ambientes.filter(a => a.id !== ambienteId);
                
                Sistema.salvarDados();
                this.renderizar();
                Orcamento.calcularPrecoVenda();
                Utils.mostrarAlerta('🗑️ Ambiente removido!', 'warning');
            }
        };

        // ==================== MÓDULO MÓVEL ====================
        const Movel = {
            adicionar(ambienteId) {
                PossattoSystem.temp.ambienteAtual = ambienteId;
                PossattoSystem.temp.movelEditando = null;
                
                // Limpar formulário
                document.getElementById('formMovel').reset();
                ['movelMateriais', 'movelFerragens', 'movelAcessorios', 'movelEspeciais'].forEach(id => {
                    const element = document.getElementById(id);
                    if (element) element.innerHTML = '';
                });
                
                document.getElementById('custoTotalMovel').value = 'R$ 0,00';
                document.getElementById('valorVendaMovel').value = 'R$ 0,00';
                
                Modal.abrir('modalMovel');
            },

            salvar(event) {
                event.preventDefault();
                
                const ambienteId = PossattoSystem.temp.ambienteAtual;
                const ambiente = PossattoSystem.dados.ambientes.find(a => a.id === ambienteId);
                
                if (!ambiente) {
                    Utils.mostrarAlerta('❌ Ambiente não encontrado', 'danger');
                    return;
                }
                
                const nome = document.getElementById('nomeMovel').value;
                if (!nome) {
                    Utils.mostrarAlerta('⚠️ Preencha o nome do móvel', 'warning');
                    return;
                }
                
                const movel = {
                    id: PossattoSystem.temp.movelEditando || Utils.gerarId(),
                    nome: nome,
                    largura: parseFloat(document.getElementById('larguraMovel').value) || 0,
                    altura: parseFloat(document.getElementById('alturaMovel').value) || 0,
                    profundidade: parseFloat(document.getElementById('profundidadeMovel').value) || 0,
                    materiais: this.coletarItens('movelMateriais'),
                    ferragens: this.coletarItens('movelFerragens'),
                    acessorios: this.coletarItens('movelAcessorios'),
                    especiais: this.coletarItens('movelEspeciais'),
                    totalMateriais: 0,
                    totalFerragens: 0,
                    totalAcessorios: 0,
                    totalEspeciais: 0,
                    custoTotal: 0,
                    valorVenda: 0
                };
                
                // Calcular totais
                movel.totalMateriais = movel.materiais.reduce((sum, item) => sum + item.total, 0);
                movel.totalFerragens = movel.ferragens.reduce((sum, item) => sum + item.total, 0);
                movel.totalAcessorios = movel.acessorios.reduce((sum, item) => sum + item.total, 0);
                movel.totalEspeciais = movel.especiais.reduce((sum, item) => sum + item.total, 0);
                movel.custoTotal = movel.totalMateriais + movel.totalFerragens + 
                                  movel.totalAcessorios + movel.totalEspeciais;
                
                // Calcular valor de venda
                const fator = parseFloat(document.getElementById('fatorMultiplicador').value) || 2.2;
                const percentRT = parseFloat(document.getElementById('percentRT').value) || 0;
                const percentAdicional = parseFloat(document.getElementById('percentAdicional').value) || 0;
                
                const materiaisComFator = movel.totalMateriais * fator;
                const subtotal = materiaisComFator + movel.totalFerragens + 
                                movel.totalAcessorios + movel.totalEspeciais;
                const valorRT = subtotal * (percentRT / 100);
                const valorAdicional = (subtotal + valorRT) * (percentAdicional / 100);
                movel.valorVenda = subtotal + valorRT + valorAdicional;
                
                // Salvar ou atualizar
                if (PossattoSystem.temp.movelEditando) {
                    const index = ambiente.moveis.findIndex(m => m.id === PossattoSystem.temp.movelEditando);
                    if (index !== -1) ambiente.moveis[index] = movel;
                } else {
                    ambiente.moveis.push(movel);
                }
                
                // Atualizar totais do ambiente
                ambiente.custoTotal = ambiente.moveis.reduce((sum, m) => sum + m.custoTotal, 0);
                ambiente.valorVendaTotal = ambiente.moveis.reduce((sum, m) => sum + m.valorVenda, 0);
                
                // Salvar último móvel
                PossattoSystem.temp.ultimoMovelAdicionado = movel;
                
                Sistema.salvarDados();
                Ambiente.renderizar();
                Orcamento.calcularPrecoVenda();
                Modal.fechar('modalMovel');
                Utils.mostrarAlerta('✅ Móvel salvo!', 'success');
            },

            coletarItens(containerId) {
                const container = document.getElementById(containerId);
                const itens = [];
                
                if (!container) return itens;
                
                container.querySelectorAll('.material-item-row').forEach(row => {
                    const select = row.querySelector('select');
                    const inputs = row.querySelectorAll('input[type="number"]');
                    
                    if (select && select.value && inputs.length >= 2) {
                        const quantidade = parseFloat(inputs[0].value) || 0;
                        const preco = parseFloat(inputs[1].value) || 0;
                        
                        itens.push({
                            id: parseInt(select.value),
                            nome: select.options[select.selectedIndex].text,
                            quantidade: quantidade,
                            preco: preco,
                            total: quantidade * preco
                        });
                    }
                });
                
                return itens;
            },

            adicionarMaterial(tipo) {
                const containerId = 'movel' + tipo.charAt(0).toUpperCase() + tipo.slice(1);
                const container = document.getElementById(containerId);
                if (!container) return;
                
                const rowId = Utils.gerarId();
                const items = PossattoSystem.dados.baseMateriais[tipo] || [];
                
                let options = '<option value="">Selecione um item</option>';
                options += items.map(item => 
                    `<option value="${item.id}" data-preco="${item.preco}">${item.nome}</option>`
                ).join('');
                
                const row = document.createElement('div');
                row.className = 'material-item-row';
                row.id = `row-${rowId}`;
                
                if (tipo === 'especiais') {
                    row.innerHTML = `
                        <select class="form-control" onchange="Movel.atualizarPrecoItem(${rowId}, '${tipo}')">
                            ${options}
                        </select>
                        <input type="number" class="form-control" placeholder="Qtd" step="0.01" min="0" onchange="Movel.calcularTotal()">
                        <input type="number" class="form-control" placeholder="Valor Orçado" step="0.01" min="0" onchange="Movel.calcularTotal()">
                        <span class="text-end">R$ 0,00</span>
                        <button class="btn btn-sm btn-danger" onclick="Movel.removerItem(${rowId})">🗑️</button>
                    `;
                } else {
                    row.innerHTML = `
                        <select class="form-control" onchange="Movel.atualizarPrecoItem(${rowId}, '${tipo}')">
                            ${options}
                        </select>
                        <input type="number" class="form-control" placeholder="Qtd" step="0.01" min="0" onchange="Movel.calcularTotal()">
                        <input type="number" class="form-control" placeholder="Preço" step="0.01" min="0" readonly onchange="Movel.calcularTotal()">
                        <span class="text-end">R$ 0,00</span>
                        <button class="btn btn-sm btn-danger" onclick="Movel.removerItem(${rowId})">🗑️</button>
                    `;
                }
                
                container.appendChild(row);
            },

            atualizarPrecoItem(rowId, tipo) {
                const row = document.getElementById(`row-${rowId}`);
                if (!row) return;
                
                const select = row.querySelector('select');
                const inputs = row.querySelectorAll('input[type="number"]');
                
                if (select && inputs.length >= 2 && tipo !== 'especiais') {
                    const selectedOption = select.options[select.selectedIndex];
                    const preco = selectedOption.getAttribute('data-preco');
                    if (preco) inputs[1].value = preco;
                }
                
                this.calcularTotal();
            },

            removerItem(rowId) {
                const row = document.getElementById(`row-${rowId}`);
                if (row) {
                    row.remove();
                    this.calcularTotal();
                }
            },

            calcularTotal() {
                let totalMateriais = 0;
                let totalFerragens = 0;
                let totalAcessorios = 0;
                let totalEspeciais = 0;
                
                // Calcular cada categoria
                const calcularCategoria = (containerId) => {
                    let total = 0;
                    const container = document.getElementById(containerId);
                    if (!container) return 0;
                    
                    container.querySelectorAll('.material-item-row').forEach(row => {
                        const inputs = row.querySelectorAll('input[type="number"]');
                        if (inputs.length >= 2) {
                            const qtd = parseFloat(inputs[0].value) || 0;
                            const preco = parseFloat(inputs[1].value) || 0;
                            const subtotal = qtd * preco;
                            
                            const span = row.querySelector('span');
                            if (span) span.textContent = Utils.formatarMoeda(subtotal);
                            
                            total += subtotal;
                        }
                    });
                    
                    return total;
                };
                
                totalMateriais = calcularCategoria('movelMateriais');
                totalFerragens = calcularCategoria('movelFerragens');
                totalAcessorios = calcularCategoria('movelAcessorios');
                totalEspeciais = calcularCategoria('movelEspeciais');
                
                const custoTotal = totalMateriais + totalFerragens + totalAcessorios + totalEspeciais;
                
                document.getElementById('custoTotalMovel').value = Utils.formatarMoeda(custoTotal);
                
                // Calcular valor de venda
                const fator = parseFloat(document.getElementById('fatorMultiplicador').value) || 2.2;
                const percentRT = parseFloat(document.getElementById('percentRT').value) || 0;
                const percentAdicional = parseFloat(document.getElementById('percentAdicional').value) || 0;
                
                const materiaisComFator = totalMateriais * fator;
                const subtotal = materiaisComFator + totalFerragens + totalAcessorios + totalEspeciais;
                const valorRT = subtotal * (percentRT / 100);
                const valorAdicional = (subtotal + valorRT) * (percentAdicional / 100);
                const valorVenda = subtotal + valorRT + valorAdicional;
                
                document.getElementById('valorVendaMovel').value = Utils.formatarMoeda(valorVenda);
            },

            duplicar() {
                const nome = document.getElementById('nomeMovel');
                if (!nome || !nome.value) {
                    Utils.mostrarAlerta('⚠️ Preencha os dados do móvel primeiro', 'warning');
                    return;
                }
                
                nome.value = nome.value + ' (Cópia)';
                Utils.mostrarAlerta('📋 Móvel duplicado! Ajuste os dados e salve.', 'info');
            },

            duplicarAnterior() {
                const ultimo = PossattoSystem.temp.ultimoMovelAdicionado;
                if (!ultimo) {
                    Utils.mostrarAlerta('⚠️ Nenhum móvel anterior para duplicar', 'warning');
                    return;
                }
                
                // Preencher formulário
                document.getElementById('nomeMovel').value = ultimo.nome + ' (Cópia)';
                document.getElementById('larguraMovel').value = ultimo.largura;
                document.getElementById('alturaMovel').value = ultimo.altura;
                document.getElementById('profundidadeMovel').value = ultimo.profundidade;
                
                // Limpar e recriar materiais
                ['materiais', 'ferragens', 'acessorios', 'especiais'].forEach(tipo => {
                    const containerId = 'movel' + tipo.charAt(0).toUpperCase() + tipo.slice(1);
                    const container = document.getElementById(containerId);
                    if (container) container.innerHTML = '';
                    
                    if (ultimo[tipo]) {
                        ultimo[tipo].forEach(item => {
                            this.adicionarMaterial(tipo);
                            const rows = container.querySelectorAll('.material-item-row');
                            const lastRow = rows[rows.length - 1];
                            
                            if (lastRow) {
                                const select = lastRow.querySelector('select');
                                const inputs = lastRow.querySelectorAll('input[type="number"]');
                                
                                if (select) select.value = item.id;
                                if (inputs[0]) inputs[0].value = item.quantidade;
                                if (inputs[1]) inputs[1].value = item.preco;
                            }
                        });
                    }
                });
                
                this.calcularTotal();
                Utils.mostrarAlerta('📋 Móvel anterior duplicado!', 'success');
            },

            editar(ambienteId, movelId) {
                const ambiente = PossattoSystem.dados.ambientes.find(a => a.id === ambienteId);
                const movel = ambiente?.moveis.find(m => m.id === movelId);
                
                if (!movel) {
                    Utils.mostrarAlerta('❌ Móvel não encontrado', 'danger');
                    return;
                }
                
                PossattoSystem.temp.ambienteAtual = ambienteId;
                PossattoSystem.temp.movelEditando = movelId;
                
                // Preencher formulário
                document.getElementById('nomeMovel').value = movel.nome;
                document.getElementById('larguraMovel').value = movel.largura;
                document.getElementById('alturaMovel').value = movel.altura;
                document.getElementById('profundidadeMovel').value = movel.profundidade;
                
                // Recriar materiais
                ['materiais', 'ferragens', 'acessorios', 'especiais'].forEach(tipo => {
                    const containerId = 'movel' + tipo.charAt(0).toUpperCase() + tipo.slice(1);
                    const container = document.getElementById(containerId);
                    if (container) container.innerHTML = '';
                    
                    if (movel[tipo]) {
                        movel[tipo].forEach(item => {
                            this.adicionarMaterial(tipo);
                            const rows = container.querySelectorAll('.material-item-row');
                            const lastRow = rows[rows.length - 1];
                            
                            if (lastRow) {
                                const select = lastRow.querySelector('select');
                                const inputs = lastRow.querySelectorAll('input[type="number"]');
                                
                                if (select) select.value = item.id;
                                if (inputs[0]) inputs[0].value = item.quantidade;
                                if (inputs[1]) inputs[1].value = item.preco;
                            }
                        });
                    }
                });
                
                this.calcularTotal();
                Modal.abrir('modalMovel');
            },

            duplicarNoAmbiente(ambienteId, movelId) {
                const ambiente = PossattoSystem.dados.ambientes.find(a => a.id === ambienteId);
                const movel = ambiente?.moveis.find(m => m.id === movelId);
                
                if (!movel) return;
                
                const novoMovel = {
                    ...movel,
                    id: Utils.gerarId(),
                    nome: movel.nome + ' (Cópia)'
                };
                
                ambiente.moveis.push(novoMovel);
                ambiente.custoTotal = ambiente.moveis.reduce((sum, m) => sum + m.custoTotal, 0);
                ambiente.valorVendaTotal = ambiente.moveis.reduce((sum, m) => sum + m.valorVenda, 0);
                
                Sistema.salvarDados();
                Ambiente.renderizar();
                Orcamento.calcularPrecoVenda();
                Utils.mostrarAlerta('📋 Móvel duplicado!', 'success');
            },

            apagar(ambienteId, movelId) {
                if (!Modal.confirmar('Deseja realmente apagar este móvel?')) return;
                
                const ambiente = PossattoSystem.dados.ambientes.find(a => a.id === ambienteId);
                if (!ambiente) return;
                
                ambiente.moveis = ambiente.moveis.filter(m => m.id !== movelId);
                ambiente.custoTotal = ambiente.moveis.reduce((sum, m) => sum + m.custoTotal, 0);
                ambiente.valorVendaTotal = ambiente.moveis.reduce((sum, m) => sum + m.valorVenda, 0);
                
                Sistema.salvarDados();
                Ambiente.renderizar();
                Orcamento.calcularPrecoVenda();
                Utils.mostrarAlerta('🗑️ Móvel removido!', 'warning');
            }
        };

        // ==================== MÓDULO ORÇAMENTO ====================
        const Orcamento = {
            salvar() {
                const nomeCliente = document.getElementById('nomeCliente').value;
                if (!nomeCliente) {
                    Utils.mostrarAlerta('⚠️ Preencha o nome do cliente', 'warning');
                    return;
                }
                
                // Gerar número ORC
                const numeroOrc = 'ORC-' + Date.now();
                document.getElementById('numeroOrc').value = numeroOrc;
                
                const dados = {
                    id: Utils.gerarId(),
                    numero: numeroOrc,
                    data: new Date().toISOString().split('T')[0],
                    cliente: nomeCliente,
                    cpfCliente: document.getElementById('cpfCliente').value,
                    telefone: document.getElementById('telefoneCliente').value,
                    tipoProjeto: document.getElementById('tipoProjeto').value,
                    arquiteto: document.getElementById('nomeArquiteto').value,
                    enderecoEntrega: document.getElementById('enderecoEntrega').value,
                    prazoEntrega: document.getElementById('prazoEntrega').value,
                    materiaPrima: document.getElementById('materiaPrima').value || '100% MDF dupla face',
                    tempoGarantia: document.getElementById('tempoGarantia').value || 'Garantia de 3 anos',
                    prazoEntregaObs: document.getElementById('prazoEntregaObs').value,
                    observacoesGerais: document.getElementById('observacoesGerais').value,
                    formaPagamento: document.getElementById('formaPagamentoDefinida').value,
                    ambientes: JSON.parse(JSON.stringify(PossattoSystem.dados.ambientes)),
                    valorVenda: this.calcularValorTotal(),
                    status: 'aguardando'
                };
                
                PossattoSystem.dados.orcamentos.push(dados);
                Sistema.salvarDados();
                this.renderizarHistorico();
                Utils.mostrarAlerta(`✅ Orçamento salvo! Número: ${numeroOrc}`, 'success');
            },

            calcularValorTotal() {
                return PossattoSystem.dados.ambientes.reduce((sum, amb) => sum + amb.valorVendaTotal, 0);
            },

            calcularPrecoVenda() {
                let totalMateriais = 0;
                let totalFerragens = 0;
                let totalAcessorios = 0;
                let totalEspeciais = 0;
                
                PossattoSystem.dados.ambientes.forEach(ambiente => {
                    ambiente.moveis.forEach(movel => {
                        totalMateriais += movel.totalMateriais || 0;
                        totalFerragens += movel.totalFerragens || 0;
                        totalAcessorios += movel.totalAcessorios || 0;
                        totalEspeciais += movel.totalEspeciais || 0;
                    });
                });
                
                const fator = parseFloat(document.getElementById('fatorMultiplicador').value) || 2.2;
                const percentRT = parseFloat(document.getElementById('percentRT').value) || 0;
                const percentAdicional = parseFloat(document.getElementById('percentAdicional').value) || 0;
                
                const materiaisComFator = totalMateriais * fator;
                const subtotal = materiaisComFator + totalFerragens + totalAcessorios + totalEspeciais;
                const valorRT = subtotal * (percentRT / 100);
                const valorAdicional = (subtotal + valorRT) * (percentAdicional / 100);
                const valorVendaFinal = subtotal + valorRT + valorAdicional;
                
                // Atualizar interface
                document.getElementById('custoMateriais').textContent = Utils.formatarMoeda(totalMateriais);
                document.getElementById('fatorAtual').textContent = fator.toFixed(1);
                document.getElementById('materiaisComFator').textContent = Utils.formatarMoeda(materiaisComFator);
                document.getElementById('totalFerragens').textContent = Utils.formatarMoeda(totalFerragens);
                document.getElementById('totalAcessorios').textContent = Utils.formatarMoeda(totalAcessorios);
                document.getElementById('totalEspeciais').textContent = Utils.formatarMoeda(totalEspeciais);
                document.getElementById('subtotalAntes').textContent = Utils.formatarMoeda(subtotal);
                document.getElementById('rtPercent').textContent = percentRT.toFixed(1);
                document.getElementById('valorRT').textContent = Utils.formatarMoeda(valorRT);
                document.getElementById('adicionalPercent').textContent = percentAdicional.toFixed(1);
                document.getElementById('valorAdicional').textContent = Utils.formatarMoeda(valorAdicional);
                document.getElementById('valorVendaFinal').textContent = Utils.formatarMoeda(valorVendaFinal);
                
                // Atualizar simulação
                this.atualizarSimulacao();
                
                return valorVendaFinal;
            },

            atualizarSimulacao() {
                const valorTotal = this.calcularValorTotal();
                
                // À vista
                const descontoAvista = parseFloat(document.getElementById('descontoAvista').value) || 0;
                const valorAvista = valorTotal * (1 - descontoAvista / 100);
                document.getElementById('valorAvista').textContent = Utils.formatarMoeda(valorAvista);
                
                // Cartão
                const parcelas = parseInt(document.getElementById('parcelasCartao').value) || 1;
                const taxaCartao = parseFloat(document.getElementById('taxaCartao').value) || 0;
                const valorCartao = valorTotal * (1 + taxaCartao / 100);
                const parcelaCartao = valorCartao / parcelas;
                document.getElementById('valorCartao').textContent = Utils.formatarMoeda(valorCartao);
                document.getElementById('parcelaCartao').textContent = Utils.formatarMoeda(parcelaCartao);
                
                // Boleto
                const parcelasBoleto = parseInt(document.getElementById('parcelasBoleto').value) || 1;
                const taxaBoleto = parseFloat(document.getElementById('taxaBoleto').value) || 0;
                const valorBoleto = valorTotal * (1 + taxaBoleto / 100);
                const parcelaBoletoValor = valorBoleto / parcelasBoleto;
                document.getElementById('valorBoleto').textContent = Utils.formatarMoeda(valorBoleto);
                document.getElementById('parcelaBoleto').textContent = Utils.formatarMoeda(parcelaBoletoValor);
                
                // Entrada + Parcelas
                const valorEntrada = parseFloat(document.getElementById('valorEntrada').value) || 0;
                const parcelasEntrada = parseInt(document.getElementById('parcelasEntrada').value) || 1;
                const valorRestante = Math.max(0, valorTotal - valorEntrada);
                const parcelaEntradaValor = valorRestante / parcelasEntrada;
                document.getElementById('valorRestante').textContent = Utils.formatarMoeda(valorRestante);
                document.getElementById('parcelaEntrada').textContent = Utils.formatarMoeda(parcelaEntradaValor);
                
                this.atualizarResumoPagamento();
            },

            atualizarResumoPagamento() {
                const formaPagamento = document.getElementById('formaPagamentoDefinida').value;
                const resumo = document.getElementById('resumoPagamento');
                
                if (!resumo || !formaPagamento) {
                    if (resumo) resumo.innerHTML = '';
                    return;
                }
                
                const valorTotal = this.calcularValorTotal();
                let resumoHTML = '';
                
                switch (formaPagamento) {
                    case 'avista':
                        const desconto = parseFloat(document.getElementById('descontoAvista').value) || 0;
                        const valorAvista = valorTotal * (1 - desconto / 100);
                        resumoHTML = `
                            <div class="alert alert-success">
                                <strong>Forma de Pagamento: À Vista</strong><br>
                                Valor: ${Utils.formatarMoeda(valorAvista)} (desconto de ${desconto}%)
                            </div>
                        `;
                        break;
                        
                    case 'cartao':
                        const parcelas = parseInt(document.getElementById('parcelasCartao').value) || 1;
                        const taxa = parseFloat(document.getElementById('taxaCartao').value) || 0;
                        const valorCartao = valorTotal * (1 + taxa / 100);
                        const parcela = valorCartao / parcelas;
                        resumoHTML = `
                            <div class="alert alert-info">
                                <strong>Forma de Pagamento: Cartão</strong><br>
                                Valor Total: ${Utils.formatarMoeda(valorCartao)}<br>
                                ${parcelas}x de ${Utils.formatarMoeda(parcela)} (taxa de ${taxa}%)
                            </div>
                        `;
                        break;
                        
                    case 'boleto':
                        const parcelasBol = parseInt(document.getElementById('parcelasBoleto').value) || 1;
                        const taxaBol = parseFloat(document.getElementById('taxaBoleto').value) || 0;
                        const valorBoleto = valorTotal * (1 + taxaBol / 100);
                        const parcelaBol = valorBoleto / parcelasBol;
                        resumoHTML = `
                            <div class="alert alert-warning">
                                <strong>Forma de Pagamento: Boleto</strong><br>
                                Valor Total: ${Utils.formatarMoeda(valorBoleto)}<br>
                                ${parcelasBol}x de ${Utils.formatarMoeda(parcelaBol)} (taxa de ${taxaBol}%)
                            </div>
                        `;
                        break;
                        
                    case 'entrada':
                        const entrada = parseFloat(document.getElementById('valorEntrada').value) || 0;
                        const parcelasEnt = parseInt(document.getElementById('parcelasEntrada').value) || 1;
                        const restante = Math.max(0, valorTotal - entrada);
                        const parcelaEnt = restante / parcelasEnt;
                        resumoHTML = `
                            <div class="alert alert-secondary">
                                <strong>Forma de Pagamento: Entrada + Parcelas</strong><br>
                                Valor Total: ${Utils.formatarMoeda(valorTotal)}<br>
                                Entrada: ${Utils.formatarMoeda(entrada)}<br>
                                ${parcelasEnt}x de ${Utils.formatarMoeda(parcelaEnt)}
                            </div>
                        `;
                        break;
                }
                
                resumo.innerHTML = resumoHTML;
            },

            renderizarHistorico() {
                const container = document.getElementById('historicoOrcamentos');
                if (!container) return;
                
                const orcamentos = PossattoSystem.dados.orcamentos;
                
                if (orcamentos.length === 0) {
                    container.innerHTML = '<div class="empty-state"><p>Nenhum orçamento salvo ainda.</p></div>';
                    return;
                }
                
                container.innerHTML = `
                    <table class="table">
                        <thead>
                            <tr>
                                <th>Número</th>
                                <th>Data</th>
                                <th>Cliente</th>
                                <th>Tipo</th>
                                <th>Valor</th>
                                <th>Status</th>
                                <th>Ações</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${orcamentos.map(orc => `
                                <tr>
                                    <td>${orc.numero}</td>
                                    <td>${Utils.formatarData(orc.data)}</td>
                                    <td>${orc.cliente}</td>
                                    <td>${orc.tipoProjeto || 'N/A'}</td>
                                    <td>${Utils.formatarMoeda(orc.valorVenda)}</td>
                                    <td>
                                        <span class="status-badge ${orc.status}">
                                            ${orc.status === 'aguardando' ? 'Aguardando' :
                                              orc.status === 'aprovado' ? 'Aprovado' : 'Reprovado'}
                                        </span>
                                    </td>
                                    <td>
                                        <button class="btn btn-sm btn-success" onclick="Orcamento.alterarStatus(${orc.id}, 'aprovado')">✅</button>
                                        <button class="btn btn-sm btn-danger" onclick="Orcamento.alterarStatus(${orc.id}, 'reprovado')">❌</button>
                                        <button class="btn btn-sm btn-warning" onclick="Orcamento.visualizar(${orc.id})">👁️</button>
                                        <button class="btn btn-sm btn-info" onclick="Orcamento.gerarListaMateriais(${orc.id})">📋</button>
                                    </td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                `;
            },

            alterarStatus(id, novoStatus) {
                const orcamento = PossattoSystem.dados.orcamentos.find(o => o.id === id);
                if (!orcamento) return;
                
                orcamento.status = novoStatus;
                
                if (novoStatus === 'aprovado') {
                    // Criar projeto automaticamente
                    const novoProjeto = {
                        id: Utils.gerarId(),
                        orcamentoId: orcamento.id,
                        numeroOrc: orcamento.numero,
                        cliente: orcamento.cliente,
                        tipoProjeto: orcamento.tipoProjeto,
                        arquiteto: orcamento.arquiteto,
                        enderecoEntrega: orcamento.enderecoEntrega,
                        prazoEntrega: orcamento.prazoEntrega,
                        dataInicio: new Date().toISOString().split('T')[0],
                        valorTotal: orcamento.valorVenda,
                        valorPago: 0,
                        formaPagamento: orcamento.formaPagamento,
                        status: 'em-andamento',
                        etapas: [
                            { nome: 'Medição', status: 'cinza', percentual: 10 },
                            { nome: 'Orçamento', status: 'verde', percentual: 10 },
                            { nome: 'Aprovação do orçamento', status: 'verde', percentual: 10 },
                            { nome: 'Contrato', status: 'cinza', percentual: 10 },
                            { nome: 'Projeto', status: 'cinza', percentual: 10 },
                            { nome: 'Compra de materiais', status: 'cinza', percentual: 10 },
                            { nome: 'Corte/Acabamento', status: 'cinza', percentual: 10, tipo: 'Corte' },
                            { nome: 'Montagem', status: 'cinza', percentual: 10 },
                            { nome: 'Entrega final', status: 'cinza', percentual: 10 },
                            { nome: 'Vistoria', status: 'cinza', percentual: 10 }
                        ],
                        progresso: 20,
                        observacoes: ''
                    };
                    
                    PossattoSystem.dados.projetos.push(novoProjeto);
                    
                    // Adicionar como receita prevista
                    const novaReceita = {
                        id: Utils.gerarId(),
                        data: orcamento.prazoEntrega || new Date().toISOString().split('T')[0],
                        descricao: `${orcamento.cliente} - ${orcamento.numero}`,
                        valor: orcamento.valorVenda,
                        categoria: 'orcamento',
                        status: 'prevista'
                    };
                    
                    PossattoSystem.dados.receitas.push(novaReceita);
                }
                
                Sistema.salvarDados();
                this.renderizarHistorico();
                Projeto.atualizar();
                Utils.mostrarAlerta(`✅ Status alterado para ${novoStatus === 'aprovado' ? 'Aprovado' : 'Reprovado'}`, 'success');
            },

            visualizar(id) {
                const orcamento = PossattoSystem.dados.orcamentos.find(o => o.id === id);
                if (!orcamento) return;
                
                // Preencher formulário
                document.getElementById('numeroOrc').value = orcamento.numero;
                document.getElementById('nomeCliente').value = orcamento.cliente;
                document.getElementById('cpfCliente').value = orcamento.cpfCliente;
                document.getElementById('telefoneCliente').value = orcamento.telefone;
                document.getElementById('tipoProjeto').value = orcamento.tipoProjeto;
                document.getElementById('nomeArquiteto').value = orcamento.arquiteto;
                document.getElementById('enderecoEntrega').value = orcamento.enderecoEntrega;
                document.getElementById('prazoEntrega').value = orcamento.prazoEntrega;
                document.getElementById('materiaPrima').value = orcamento.materiaPrima;
                document.getElementById('tempoGarantia').value = orcamento.tempoGarantia;
                document.getElementById('prazoEntregaObs').value = orcamento.prazoEntregaObs;
                document.getElementById('observacoesGerais').value = orcamento.observacoesGerais;
                document.getElementById('formaPagamentoDefinida').value = orcamento.formaPagamento;
                
                // Carregar ambientes
                PossattoSystem.dados.ambientes = JSON.parse(JSON.stringify(orcamento.ambientes));
                Ambiente.renderizar();
                this.calcularPrecoVenda();
                
                Sistema.switchTab('orcamento');
                Utils.mostrarAlerta('👁️ Orçamento carregado', 'info');
            },

            gerarCopia() {
                if (PossattoSystem.dados.ambientes.length === 0) {
                    Utils.mostrarAlerta('⚠️ Adicione ambientes e móveis primeiro', 'warning');
                    return;
                }
                
                // Limpar dados do cliente
                document.getElementById('nomeCliente').value = '';
                document.getElementById('cpfCliente').value = '';
                document.getElementById('numeroOrc').value = '';
                document.getElementById('telefoneCliente').value = '';
                
                Utils.mostrarAlerta('📋 Cópia criada! Preencha os dados do novo cliente.', 'success');
            },

            gerarListaMateriais(id) {
                const orcamento = PossattoSystem.dados.orcamentos.find(o => o.id === id);
                if (!orcamento) return;
                
                let listaMateriais = [];
                
                // Coletar todos os materiais
                if (orcamento.ambientes) {
                    orcamento.ambientes.forEach(ambiente => {
                        if (ambiente.moveis) {
                            ambiente.moveis.forEach(movel => {
                                ['materiais', 'ferragens', 'acessorios', 'especiais'].forEach(categoria => {
                                    if (movel[categoria]) {
                                        movel[categoria].forEach(item => {
                                            listaMateriais.push({
                                                categoria: categoria,
                                                ambiente: ambiente.nome,
                                                movel: movel.nome,
                                                nome: item.nome,
                                                quantidade: item.quantidade,
                                                preco: item.preco,
                                                total: item.total
                                            });
                                        });
                                    }
                                });
                            });
                        }
                    });
                }
                
                // Gerar PDF usando jsPDF
                if (window.jsPDF) {
                    const { jsPDF } = window.jsPDF;
                    const doc = new jsPDF();
                    
                    doc.setFontSize(16);
                    doc.text('Lista de Materiais', 20, 20);
                    doc.setFontSize(12);
                    doc.text(`Orçamento: ${orcamento.numero}`, 20, 30);
                    doc.text(`Cliente: ${orcamento.cliente}`, 20, 40);
                    doc.text(`Data: ${Utils.formatarData(orcamento.data)}`, 20, 50);
                    
                    let y = 70;
                    doc.setFontSize(10);
                    
                    // Agrupar por categoria
                    const categorias = ['materiais', 'ferragens', 'acessorios', 'especiais'];
                    categorias.forEach(cat => {
                        const items = listaMateriais.filter(i => i.categoria === cat);
                        if (items.length > 0) {
                            doc.setFontSize(12);
                            doc.text(cat.toUpperCase(), 20, y);
                            y += 10;
                            
                            doc.setFontSize(10);
                            items.forEach(item => {
                                if (y > 270) {
                                    doc.addPage();
                                    y = 20;
                                }
                                
                                const linha = `${item.nome} - Qtd: ${item.quantidade} - ${Utils.formatarMoeda(item.total)}`;
                                doc.text(linha, 25, y);
                                y += 7;
                            });
                            
                            y += 10;
                        }
                    });
                    
                    // Total
                    doc.setFontSize(12);
                    doc.text(`Valor Total: ${Utils.formatarMoeda(orcamento.valorVenda)}`, 20, y);
                    
                    doc.save(`lista-materiais-${orcamento.numero}.pdf`);
                    Utils.mostrarAlerta('📋 Lista de materiais gerada!', 'success');
                } else {
                    Utils.mostrarAlerta('❌ Biblioteca PDF não carregada', 'danger');
                }
            },

            gerarPDF() {
                Utils.mostrarAlerta('🚧 Funcionalidade em desenvolvimento', 'info');
                // TODO: Implementar geração de PDF do orçamento completo
            },

            gerarContrato() {
                Utils.mostrarAlerta('🚧 Funcionalidade em desenvolvimento', 'info');
                // TODO: Implementar geração de contrato
            },

            atualizar() {
                this.renderizarHistorico();
            }
        };

        // ==================== MÓDULO PROJETO ====================
        const Projeto = {
            atualizar() {
                const projetos = PossattoSystem.dados.projetos;
                
                // Atualizar KPIs
                const total = projetos.length;
                const emAndamento = projetos.filter(p => p.status === 'em-andamento').length;
                const concluidos = projetos.filter(p => p.status === 'concluido').length;
                const valorTotal = projetos.reduce((sum, p) => sum + (p.valorTotal || 0), 0);
                
                document.getElementById('totalProjetos').textContent = total;
                document.getElementById('projetosAndamento').textContent = emAndamento;
                document.getElementById('projetosConcluidos').textContent = concluidos;
                document.getElementById('valorTotalProjetos').textContent = Utils.formatarMoeda(valorTotal);
                
                this.renderizar('todos');
            },

            filtrar(filtro) {
                this.renderizar(filtro);
            },

            renderizar(filtro = 'todos') {
                const container = document.getElementById('listaProjetos');
                if (!container) return;
                
                let projetos = PossattoSystem.dados.projetos;
                
                if (filtro === 'concluidos') {
                    projetos = projetos.filter(p => p.status === 'concluido');
                } else if (filtro === 'em-andamento') {
                    projetos = projetos.filter(p => p.status === 'em-andamento');
                }
                
                if (projetos.length === 0) {
                    container.innerHTML = '<div class="empty-state"><p>Nenhum projeto encontrado.</p></div>';
                    return;
                }
                
                container.innerHTML = projetos.map(projeto => `
                    <div class="projeto-card ${projeto.status}" onclick="Projeto.abrirDetalhe(${projeto.id})">
                        <div class="d-flex justify-content-between align-items-start">
                            <div>
                                <h5>${projeto.cliente}</h5>
                                <p class="text-muted mb-1">${projeto.numeroOrc} - ${projeto.tipoProjeto || 'N/A'}</p>
                                <p class="text-muted mb-1">Prazo: ${Utils.formatarData(projeto.prazoEntrega)}</p>
                            </div>
                            <div class="text-end">
                                <span class="badge badge-${
                                    projeto.status === 'concluido' ? 'success' :
                                    projeto.status === 'em-andamento' ? 'warning' : 'danger'
                                }">
                                    ${projeto.status === 'concluido' ? 'Concluído' :
                                      projeto.status === 'em-andamento' ? 'Em Andamento' : 'Cancelado'}
                                </span>
                                <p class="mt-2 mb-0"><strong>${Utils.formatarMoeda(projeto.valorTotal)}</strong></p>
                            </div>
                        </div>
                        
                        <div class="mt-3">
                            <div class="progress-bar">
                                <div class="progress-fill" style="width: ${projeto.progresso}%"></div>
                            </div>
                            <small>Progresso: ${projeto.progresso}%</small>
                        </div>
                        
                        <div class="etapas-grid mt-2">
                            ${projeto.etapas.map((etapa, idx) => 
                                `<div class="etapa-item ${etapa.status}" title="${etapa.nome}">${idx + 1}</div>`
                            ).join('')}
                        </div>
                    </div>
                `).join('');
            },

            abrirDetalhe(projetoId) {
                const projeto = PossattoSystem.dados.projetos.find(p => p.id === projetoId);
                if (!projeto) return;
                
                const modalHtml = `
                    <div class="modal-content">
                        <div class="modal-header">
                            <h3 class="modal-title">📁 Detalhes do Projeto</h3>
                            <button class="close-btn" onclick="Modal.fechar('modalProjeto')">&times;</button>
                        </div>
                        
                        <div class="card mb-3">
                            <div class="card-body">
                                <p><strong>Cliente:</strong> ${projeto.cliente}</p>
                                <p><strong>Orçamento:</strong> ${projeto.numeroOrc}</p>
                                <p><strong>Tipo:</strong> ${projeto.tipoProjeto || 'N/A'}</p>
                                <p><strong>Arquiteto:</strong> ${projeto.arquiteto || 'N/A'}</p>
                                <p><strong>Endereço:</strong> ${projeto.enderecoEntrega || 'N/A'}</p>
                                <p><strong>Prazo:</strong> ${Utils.formatarData(projeto.prazoEntrega)}</p>
                                <p><strong>Início:</strong> ${Utils.formatarData(projeto.dataInicio)}</p>
                            </div>
                        </div>
                        
                        <div class="card mb-3">
                            <div class="card-header">
                                <h5>💰 Dados da Negociação</h5>
                            </div>
                            <div class="card-body">
                                <div class="form-row">
                                    <div class="form-group">
                                        <label class="form-label">Valor Total</label>
                                        <input type="text" class="form-control" value="${Utils.formatarMoeda(projeto.valorTotal)}" readonly>
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">Valor Pago</label>
                                        <input type="number" class="form-control" id="valorPagoProjeto${projetoId}" value="${projeto.valorPago || 0}" step="0.01">
                                    </div>
                                    <div class="form-group">
                                        <label class="form-label">Forma de Pagamento</label>
                                        <input type="text" class="form-control" id="formaPagamentoProjeto${projetoId}" value="${projeto.formaPagamento || ''}">
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <div class="card mb-3">
                            <div class="card-header">
                                <h5>📋 Etapas de Execução</h5>
                                <small class="text-muted">Clique para alterar: Cinza → Laranja → Verde</small>
                            </div>
                            <div class="card-body">
                                <div class="etapas-grid">
                                    ${projeto.etapas.map((etapa, idx) => `
                                        <div class="etapa-item ${etapa.status}" 
                                             onclick="Projeto.alterarStatusEtapa(${projetoId}, ${idx})"
                                             title="${etapa.nome}">
                                            ${etapa.nome}
                                        </div>
                                    `).join('')}
                                </div>
                            </div>
                        </div>
                        
                        <div class="form-group">
                            <label class="form-label">Observações</label>
                            <textarea class="form-control" id="observacoesProjeto${projetoId}" rows="3">${projeto.observacoes || ''}</textarea>
                        </div>
                        
                        <div class="btn-group">
                            <button class="btn btn-primary" onclick="Projeto.salvarAlteracoes(${projetoId})">💾 Salvar</button>
                            <button class="btn btn-success" onclick="Projeto.concluir(${projetoId})">✅ Concluir Projeto</button>
                            <button class="btn btn-info" onclick="Projeto.duplicar(${projetoId})">📋 Duplicar</button>
                            <button class="btn btn-danger" onclick="Projeto.cancelar(${projetoId})">❌ Cancelar Projeto</button>
                            <button class="btn btn-secondary" onclick="Modal.fechar('modalProjeto')">Fechar</button>
                        </div>
                    </div>
                `;
                
                const modal = document.getElementById('modalProjeto');
                modal.innerHTML = modalHtml;
                modal.classList.add('active');
            },

            alterarStatusEtapa(projetoId, etapaIdx) {
                const projeto = PossattoSystem.dados.projetos.find(p => p.id === projetoId);
                if (!projeto || !projeto.etapas[etapaIdx]) return;
                
                const etapa = projeto.etapas[etapaIdx];
                
                // Alternar status
                if (etapa.status === 'cinza') {
                    etapa.status = 'laranja';
                } else if (etapa.status === 'laranja') {
                    etapa.status = 'verde';
                } else {
                    etapa.status = 'cinza';
                }
                
                // Recalcular progresso
                let progressoTotal = 0;
                projeto.etapas.forEach(e => {
                    if (e.status === 'verde') {
                        progressoTotal += e.percentual || 0;
                    }
                });
                projeto.progresso = progressoTotal;
                
                // Se todas as etapas estão verdes, projeto concluído
                if (progressoTotal === 100) {
                    projeto.status = 'concluido';
                }
                
                Sistema.salvarDados();
                
                // Re-renderizar modal
                Modal.fechar('modalProjeto');
                this.abrirDetalhe(projetoId);
            },

            salvarAlteracoes(projetoId) {
                const projeto = PossattoSystem.dados.projetos.find(p => p.id === projetoId);
                if (!projeto) return;
                
                projeto.valorPago = parseFloat(document.getElementById(`valorPagoProjeto${projetoId}`).value) || 0;
                projeto.formaPagamento = document.getElementById(`formaPagamentoProjeto${projetoId}`).value;
                projeto.observacoes = document.getElementById(`observacoesProjeto${projetoId}`).value;
                
                Sistema.salvarDados();
                this.atualizar();
                Modal.fechar('modalProjeto');
                Utils.mostrarAlerta('✅ Projeto atualizado!', 'success');
            },

            concluir(projetoId) {
                if (!Modal.confirmar('Deseja marcar este projeto como concluído?')) return;
                
                const projeto = PossattoSystem.dados.projetos.find(p => p.id === projetoId);
                if (!projeto) return;
                
                projeto.status = 'concluido';
                projeto.progresso = 100;
                projeto.etapas.forEach(e => e.status = 'verde');
                
                Sistema.salvarDados();
                this.atualizar();
                Modal.fechar('modalProjeto');
                Utils.mostrarAlerta('✅ Projeto concluído!', 'success');
            },

            duplicar(projetoId) {
                const projeto = PossattoSystem.dados.projetos.find(p => p.id === projetoId);
                if (!projeto) return;
                
                const novoProjeto = {
                    ...projeto,
                    id: Utils.gerarId(),
                    numeroOrc: projeto.numeroOrc + '-COPIA',
                    cliente: projeto.cliente + ' (Cópia)',
                    dataInicio: new Date().toISOString().split('T')[0],
                    valorPago: 0,
                    status: 'em-andamento',
                    progresso: 0,
                    etapas: projeto.etapas.map(e => ({ ...e, status: 'cinza' }))
                };
                
                PossattoSystem.dados.projetos.push(novoProjeto);
                Sistema.salvarDados();
                this.atualizar();
                Modal.fechar('modalProjeto');
                Utils.mostrarAlerta('📋 Projeto duplicado!', 'success');
            },

            cancelar(projetoId) {
                if (!Modal.confirmar('Deseja realmente cancelar este projeto?')) return;
                
                const projeto = PossattoSystem.dados.projetos.find(p => p.id === projetoId);
                if (!projeto) return;
                
                projeto.status = 'cancelado';
                Sistema.salvarDados();
                this.atualizar();
                Modal.fechar('modalProjeto');
                Utils.mostrarAlerta('❌ Projeto cancelado!', 'warning');
            }
        };

        // ==================== MÓDULO FINANCEIRO ====================
        const Financeiro = {
            abrirModalDespesa() {
                document.getElementById('dataDespesa').value = new Date().toISOString().split('T')[0];
                Modal.abrir('modalDespesa');
            },

            abrirModalReceita() {
                document.getElementById('dataReceita').value = new Date().toISOString().split('T')[0];
                Modal.abrir('modalReceita');
            },

            abrirModalAnalise() {
                Modal.abrir('modalAnalise');
            },

            salvarDespesa(event) {
                event.preventDefault();
                
                const novaDespesa = {
                    id: Utils.gerarId(),
                    tipo: 'despesa',
                    data: document.getElementById('dataDespesa').value,
                    descricao: document.getElementById('descricaoDespesa').value,
                    valor: parseFloat(document.getElementById('valorDespesa').value) || 0,
                    categoria: document.getElementById('categoriaDespesa').value,
                    status: 'a-pagar'
                };
                
                PossattoSystem.dados.despesas.push(novaDespesa);
                Sistema.salvarDados();
                Modal.fechar('modalDespesa');
                Utils.mostrarAlerta('✅ Despesa adicionada!', 'success');
                this.atualizar();
            },

            salvarReceita(event) {
                event.preventDefault();
                
                const novaReceita = {
                    id: Utils.gerarId(),
                    tipo: 'receita',
                    data: document.getElementById('dataReceita').value,
                    descricao: document.getElementById('descricaoReceita').value,
                    valor: parseFloat(document.getElementById('valorReceita').value) || 0,
                    categoria: document.getElementById('categoriaReceita').value,
                    status: 'prevista'
                };
                
                PossattoSystem.dados.receitas.push(novaReceita);
                Sistema.salvarDados();
                Modal.fechar('modalReceita');
                Utils.mostrarAlerta('✅ Receita adicionada!', 'success');
                this.atualizar();
            },

            gerarAnalise() {
                // Mostrar análise
                document.getElementById('analiseResultados').style.display = 'block';
                
                // Calcular totais
                const receitaTotal = PossattoSystem.dados.receitas.reduce((sum, r) => sum + r.valor, 0);
                const despesaTotal = PossattoSystem.dados.despesas.reduce((sum, d) => sum + d.valor, 0);
                const lucroEstimado = receitaTotal - despesaTotal;
                const margemContribuicao = receitaTotal > 0 ? (lucroEstimado / receitaTotal * 100) : 0;
                
                // Atualizar KPIs
                document.getElementById('receitaTotal').textContent = Utils.formatarMoeda(receitaTotal);
                document.getElementById('despesaTotal').textContent = Utils.formatarMoeda(despesaTotal);
                document.getElementById('margemContribuicao').textContent = `${margemContribuicao.toFixed(1)}%`;
                document.getElementById('lucroEstimado').textContent = Utils.formatarMoeda(lucroEstimado);
                
                // Atualizar tabela
                this.renderizarTabela();
                
                // Criar gráfico
                this.criarGrafico();
                
                document.getElementById('conteudoAnalise').innerHTML = 
                    '<p class="text-success">✅ Análise gerada com sucesso!</p>';
                
                setTimeout(() => Modal.fechar('modalAnalise'), 1500);
            },

            renderizarTabela() {
                const transacoes = [...PossattoSystem.dados.receitas, ...PossattoSystem.dados.despesas]
                    .sort((a, b) => new Date(b.data) - new Date(a.data));
                
                const tbody = document.querySelector('#tabelaTransacoes tbody');
                if (!tbody) return;
                
                tbody.innerHTML = transacoes.map(t => `
                    <tr>
                        <td><span class="badge badge-${t.tipo === 'receita' ? 'success' : 'danger'}">${t.tipo}</span></td>
                        <td>${Utils.formatarData(t.data)}</td>
                        <td>${t.descricao}</td>
                        <td>${Utils.formatarMoeda(t.valor)}</td>
                        <td>${t.categoria}</td>
                        <td>
                            <span class="status-badge ${t.status === 'pago' || t.status === 'recebida' ? 'aprovado' : 
                                                       t.status === 'em-atraso' ? 'reprovado' : 'aguardando'}">
                                ${t.status}
                            </span>
                        </td>
                        <td>
                            <button class="btn btn-sm btn-warning" onclick="Financeiro.editarTransacao(${t.id}, '${t.tipo}')">✏️</button>
                            <button class="btn btn-sm btn-danger" onclick="Financeiro.apagarTransacao(${t.id}, '${t.tipo}')">🗑️</button>
                        </td>
                    </tr>
                `).join('');
            },

            criarGrafico() {
                const canvas = document.getElementById('graficoFinanceiro');
                if (!canvas) return;
                
                const ctx = canvas.getContext('2d');
                
                // Destruir gráfico existente
                const existingChart = Chart.getChart(canvas);
                if (existingChart) existingChart.destroy();
                
                // Agrupar por mês
                const meses = {};
                
                PossattoSystem.dados.receitas.forEach(r => {
                    const mes = r.data ? r.data.substring(0, 7) : new Date().toISOString().substring(0, 7);
                    if (!meses[mes]) meses[mes] = { receitas: 0, despesas: 0 };
                    meses[mes].receitas += r.valor;
                });
                
                PossattoSystem.dados.despesas.forEach(d => {
                    const mes = d.data ? d.data.substring(0, 7) : new Date().toISOString().substring(0, 7);
                    if (!meses[mes]) meses[mes] = { receitas: 0, despesas: 0 };
                    meses[mes].despesas += d.valor;
                });
                
                const labels = Object.keys(meses).sort();
                const dataReceitas = labels.map(mes => meses[mes].receitas);
                const dataDespesas = labels.map(mes => meses[mes].despesas);
                
                new Chart(ctx, {
                    type: 'bar',
                    data: {
                        labels: labels.map(mes => {
                            const [ano, m] = mes.split('-');
                            return `${m}/${ano}`;
                        }),
                        datasets: [{
                            label: 'Receitas',
                            data: dataReceitas,
                            backgroundColor: 'rgba(39, 174, 96, 0.5)',
                            borderColor: 'rgba(39, 174, 96, 1)',
                            borderWidth: 1
                        }, {
                            label: 'Despesas',
                            data: dataDespesas,
                            backgroundColor: 'rgba(231, 76, 60, 0.5)',
                            borderColor: 'rgba(231, 76, 60, 1)',
                            borderWidth: 1
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    callback: function(value) {
                                        return Utils.formatarMoeda(value);
                                    }
                                }
                            }
                        }
                    }
                });
            },

            editarTransacao(id, tipo) {
                const lista = tipo === 'receita' ? PossattoSystem.dados.receitas : PossattoSystem.dados.despesas;
                const transacao = lista.find(t => t.id === id);
                if (!transacao) return;
                
                if (tipo === 'receita') {
                    document.getElementById('dataReceita').value = transacao.data;
                    document.getElementById('descricaoReceita').value = transacao.descricao;
                    document.getElementById('valorReceita').value = transacao.valor;
                    document.getElementById('categoriaReceita').value = transacao.categoria;
                    
                    // Remover antiga ao salvar
                    document.getElementById('formReceita').onsubmit = (e) => {
                        e.preventDefault();
                        PossattoSystem.dados.receitas = PossattoSystem.dados.receitas.filter(r => r.id !== id);
                        this.salvarReceita(e);
                        document.getElementById('formReceita').onsubmit = this.salvarReceita;
                    };
                    
                    Modal.abrir('modalReceita');
                } else {
                    document.getElementById('dataDespesa').value = transacao.data;
                    document.getElementById('descricaoDespesa').value = transacao.descricao;
                    document.getElementById('valorDespesa').value = transacao.valor;
                    document.getElementById('categoriaDespesa').value = transacao.categoria;
                    
                    // Remover antiga ao salvar
                    document.getElementById('formDespesa').onsubmit = (e) => {
                        e.preventDefault();
                        PossattoSystem.dados.despesas = PossattoSystem.dados.despesas.filter(d => d.id !== id);
                        this.salvarDespesa(e);
                        document.getElementById('formDespesa').onsubmit = this.salvarDespesa;
                    };
                    
                    Modal.abrir('modalDespesa');
                }
            },

            apagarTransacao(id, tipo) {
                if (!Modal.confirmar('Deseja realmente apagar esta transação?')) return;
                
                if (tipo === 'receita') {
                    PossattoSystem.dados.receitas = PossattoSystem.dados.receitas.filter(r => r.id !== id);
                } else {
                    PossattoSystem.dados.despesas = PossattoSystem.dados.despesas.filter(d => d.id !== id);
                }
                
                Sistema.salvarDados();
                this.gerarAnalise();
                Utils.mostrarAlerta('🗑️ Transação removida!', 'warning');
            },

            gerarPrevisaoDespesas() {
                const container = document.getElementById('listaPrevisaoDespesas');
                if (!container) return;
                
                const despesasMensais = PossattoSystem.dados.despesas.filter(d => d.categoria === 'mensal');
                
                if (despesasMensais.length === 0) {
                    container.innerHTML = '<p class="text-muted">Nenhuma despesa mensal cadastrada.</p>';
                    return;
                }
                
                container.innerHTML = `
                    <table class="table">
                        <thead>
                            <tr>
                                <th><input type="checkbox" id="selecionarTodasDespesas" onchange="Financeiro.selecionarTodasDespesas()"></th>
                                <th>Data</th>
                                <th>Descrição</th>
                                <th>Valor</th>
                                <th>Categoria</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${despesasMensais.map(d => `
                                <tr>
                                    <td><input type="checkbox" class="check-despesa" value="${d.id}"></td>
                                    <td>${Utils.formatarData(d.data)}</td>
                                    <td>${d.descricao}</td>
                                    <td>${Utils.formatarMoeda(d.valor)}</td>
                                    <td>${d.categoria}</td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                    <button class="btn btn-primary mt-2" onclick="Financeiro.carregarDespesasLancamento()">
                        📋 Carregar em Lançamentos
                    </button>
                `;
            },

            gerarPrevisaoReceitas() {
                const container = document.getElementById('listaPrevisaoReceitas');
                if (!container) return;
                
                // Combinar receitas e projetos
                const receitasPrevistas = [...PossattoSystem.dados.receitas];
                
                // Adicionar projetos como receitas
                PossattoSystem.dados.projetos.forEach(p => {
                    if (p.status === 'em-andamento' || p.status === 'concluido') {
                        receitasPrevistas.push({
                            id: 'proj-' + p.id,
                            data: p.prazoEntrega || '',
                            descricao: `${p.cliente} - ${p.numeroOrc}`,
                            valor: p.valorTotal || 0,
                            categoria: 'orcamento'
                        });
                    }
                });
                
                if (receitasPrevistas.length === 0) {
                    container.innerHTML = '<p class="text-muted">Nenhuma receita prevista.</p>';
                    return;
                }
                
                container.innerHTML = `
                    <table class="table">
                        <thead>
                            <tr>
                                <th><input type="checkbox" id="selecionarTodasReceitas" onchange="Financeiro.selecionarTodasReceitas()"></th>
                                <th>Data</th>
                                <th>Descrição</th>
                                <th>Valor</th>
                                <th>Categoria</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${receitasPrevistas.map(r => `
                                <tr>
                                    <td><input type="checkbox" class="check-receita" value="${r.id}"></td>
                                    <td>${Utils.formatarData(r.data)}</td>
                                    <td>${r.descricao}</td>
                                    <td>${Utils.formatarMoeda(r.valor)}</td>
                                    <td>${r.categoria}</td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                    <button class="btn btn-success mt-2" onclick="Financeiro.carregarReceitasLancamento()">
                        📋 Carregar em Lançamentos
                    </button>
                `;
            },

            selecionarTodasDespesas() {
                const checkAll = document.getElementById('selecionarTodasDespesas');
                document.querySelectorAll('.check-despesa').forEach(check => {
                    check.checked = checkAll.checked;
                });
            },

            selecionarTodasReceitas() {
                const checkAll = document.getElementById('selecionarTodasReceitas');
                document.querySelectorAll('.check-receita').forEach(check => {
                    check.checked = checkAll.checked;
                });
            },

            carregarDespesasLancamento() {
                PossattoSystem.temp.despesasSelecionadas = [];
                document.querySelectorAll('.check-despesa:checked').forEach(check => {
                    const despesa = PossattoSystem.dados.despesas.find(d => d.id == check.value);
                    if (despesa) PossattoSystem.temp.despesasSelecionadas.push(despesa);
                });
                
                if (PossattoSystem.temp.despesasSelecionadas.length === 0) {
                    Utils.mostrarAlerta('⚠️ Selecione pelo menos uma despesa', 'warning');
                    return;
                }
                
                Utils.mostrarAlerta(`✅ ${PossattoSystem.temp.despesasSelecionadas.length} despesa(s) carregada(s)`, 'success');
            },

            carregarReceitasLancamento() {
                PossattoSystem.temp.receitasSelecionadas = [];
                document.querySelectorAll('.check-receita:checked').forEach(check => {
                    const receita = PossattoSystem.dados.receitas.find(r => r.id == check.value);
                    if (receita) {
                        PossattoSystem.temp.receitasSelecionadas.push(receita);
                    } else {
                        // Verificar se é projeto
                        const projetoId = check.value.replace('proj-', '');
                        const projeto = PossattoSystem.dados.projetos.find(p => p.id == projetoId);
                        if (projeto) {
                            PossattoSystem.temp.receitasSelecionadas.push({
                                id: check.value,
                                data: projeto.prazoEntrega,
                                descricao: `${projeto.cliente} - ${projeto.numeroOrc}`,
                                valor: projeto.valorTotal,
                                categoria: 'orcamento'
                            });
                        }
                    }
                });
                
                if (PossattoSystem.temp.receitasSelecionadas.length === 0) {
                    Utils.mostrarAlerta('⚠️ Selecione pelo menos uma receita', 'warning');
                    return;
                }
                
                Utils.mostrarAlerta(`✅ ${PossattoSystem.temp.receitasSelecionadas.length} receita(s) carregada(s)`, 'success');
            },

            filtrarPorPeriodo() {
                // TODO: Implementar filtro por período
                this.renderizarTabela();
            },

            gerarRelatorio() {
                Utils.mostrarAlerta('🚧 Funcionalidade em desenvolvimento', 'info');
                // TODO: Implementar geração de relatório PDF
            },

            atualizar() {
                // Verificar se análise está visível
                if (document.getElementById('analiseResultados').style.display === 'block') {
                    this.gerarAnalise();
                }
            }
        };

        // ==================== MÓDULO FLUXO DE CAIXA ====================
        const FluxoCaixa = {
            abrirModalEntrada() {
                document.getElementById('tipoMovimentacao').value = 'entrada';
                document.getElementById('tituloModalFluxo').textContent = '⬆️ Adicionar Entrada';
                document.getElementById('dataMovimentacao').value = new Date().toISOString().split('T')[0];
                Modal.abrir('modalFluxo');
            },

            abrirModalSaida() {
                document.getElementById('tipoMovimentacao').value = 'saida';
                document.getElementById('tituloModalFluxo').textContent = '⬇️ Adicionar Saída';
                document.getElementById('dataMovimentacao').value = new Date().toISOString().split('T')[0];
                Modal.abrir('modalFluxo');
            },

            abrirModalLancamentos() {
                Modal.abrir('modalLancamentos');
            },

            salvarMovimentacao(event) {
                event.preventDefault();
                
                const tipo = document.getElementById('tipoMovimentacao').value;
                
                const novaMovimentacao = {
                    id: Utils.gerarId(),
                    tipo: tipo,
                    data: document.getElementById('dataMovimentacao').value,
                    descricao: document.getElementById('descricaoMovimentacao').value,
                    valor: parseFloat(document.getElementById('valorMovimentacao').value) || 0,
                    categoria: document.getElementById('categoriaMovimentacao').value
                };
                
                PossattoSystem.dados.movimentacoes.push(novaMovimentacao);
                Sistema.salvarDados();
                Modal.fechar('modalFluxo');
                Utils.mostrarAlerta(`✅ ${tipo === 'entrada' ? 'Entrada' : 'Saída'} adicionada!`, 'success');
                this.atualizar();
            },

            carregarListaPrevisoes() {
                const containerDespesas = document.getElementById('lancamentoDespesas');
                const containerReceitas = document.getElementById('lancamentoReceitas');
                
                // Despesas
                if (containerDespesas) {
                    if (PossattoSystem.temp.despesasSelecionadas.length > 0) {
                        containerDespesas.innerHTML = `
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Data</th>
                                        <th>Descrição</th>
                                        <th>Valor</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${PossattoSystem.temp.despesasSelecionadas.map(d => `
                                        <tr>
                                            <td>${Utils.formatarData(d.data)}</td>
                                            <td>${d.descricao}</td>
                                            <td>${Utils.formatarMoeda(d.valor)}</td>
                                        </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        `;
                    } else {
                        containerDespesas.innerHTML = '<p class="text-muted">Nenhuma despesa selecionada</p>';
                    }
                }
                
                // Receitas
                if (containerReceitas) {
                    if (PossattoSystem.temp.receitasSelecionadas.length > 0) {
                        containerReceitas.innerHTML = `
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th>Data</th>
                                        <th>Descrição</th>
                                        <th>Valor</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    ${PossattoSystem.temp.receitasSelecionadas.map(r => `
                                        <tr>
                                            <td>${Utils.formatarData(r.data)}</td>
                                            <td>${r.descricao}</td>
                                            <td>${Utils.formatarMoeda(r.valor)}</td>
                                        </tr>
                                    `).join('')}
                                </tbody>
                            </table>
                        `;
                    } else {
                        containerReceitas.innerHTML = '<p class="text-muted">Nenhuma receita selecionada</p>';
                    }
                }
            },

            lancarSelecionados() {
                let lancados = 0;
                
                // Lançar despesas como saídas
                PossattoSystem.temp.despesasSelecionadas.forEach(d => {
                    PossattoSystem.dados.movimentacoes.push({
                        id: Utils.gerarId(),
                        tipo: 'saida',
                        data: d.data || new Date().toISOString().split('T')[0],
                        descricao: d.descricao,
                        valor: d.valor,
                        categoria: d.categoria
                    });
                    lancados++;
                });
                
                // Lançar receitas como entradas
                PossattoSystem.temp.receitasSelecionadas.forEach(r => {
                    PossattoSystem.dados.movimentacoes.push({
                        id: Utils.gerarId(),
                        tipo: 'entrada',
                        data: r.data || new Date().toISOString().split('T')[0],
                        descricao: r.descricao,
                        valor: r.valor,
                        categoria: r.categoria
                    });
                    lancados++;
                });
                
                if (lancados > 0) {
                    Sistema.salvarDados();
                    this.atualizar();
                    Modal.fechar('modalLancamentos');
                    Utils.mostrarAlerta(`✅ ${lancados} movimentação(ões) lançada(s)!`, 'success');
                    
                    // Limpar seleções
                    PossattoSystem.temp.despesasSelecionadas = [];
                    PossattoSystem.temp.receitasSelecionadas = [];
                } else {
                    Utils.mostrarAlerta('⚠️ Nenhuma movimentação para lançar', 'warning');
                }
            },

            importarDados() {
                const input = document.createElement('input');
                input.type = 'file';
                input.accept = '.csv,.xlsx';
                input.onchange = (e) => {
                    const file = e.target.files[0];
                    if (!file) return;
                    
                    if (file.name.endsWith('.csv')) {
                        // TODO: Implementar importação CSV
                        Utils.mostrarAlerta('🚧 Importação CSV em desenvolvimento', 'info');
                    } else if (file.name.endsWith('.xlsx')) {
                        // TODO: Implementar importação Excel
                        Utils.mostrarAlerta('🚧 Importação Excel em desenvolvimento', 'info');
                    }
                };
                input.click();
            },

            aplicarFiltros() {
                this.atualizar();
            },

            atualizar() {
                // Aplicar filtros
                let movimentacoes = PossattoSystem.dados.movimentacoes;
                
                const filtroPeriodo = document.getElementById('filtroFluxoPeriodo')?.value;
                const filtroTipo = document.getElementById('filtroFluxoTipo')?.value;
                
                // Filtrar por período
                if (filtroPeriodo) {
                    const hoje = new Date();
                    let dataInicio;
                    
                    switch (filtroPeriodo) {
                        case 'hoje':
                            dataInicio = new Date(hoje.setHours(0, 0, 0, 0));
                            break;
                        case 'semana':
                            dataInicio = new Date(hoje.setDate(hoje.getDate() - 7));
                            break;
                        case 'mes':
                            dataInicio = new Date(hoje.getFullYear(), hoje.getMonth(), 1);
                            break;
                        case 'ano':
                            dataInicio = new Date(hoje.getFullYear(), 0, 1);
                            break;
                    }
                    
                    if (dataInicio) {
                        movimentacoes = movimentacoes.filter(m => 
                            new Date(m.data) >= dataInicio
                        );
                    }
                }
                
                // Filtrar por tipo
                if (filtroTipo) {
                    movimentacoes = movimentacoes.filter(m => m.tipo === filtroTipo);
                }
                
                // Calcular totais
                const entradas = movimentacoes.filter(m => m.tipo === 'entrada');
                const saidas = movimentacoes.filter(m => m.tipo === 'saida');
                
                const totalEntradas = entradas.reduce((sum, e) => sum + e.valor, 0);
                const totalSaidas = saidas.reduce((sum, s) => sum + s.valor, 0);
                const saldo = totalEntradas - totalSaidas;
                
                // Atualizar KPIs
                document.getElementById('totalEntradas').textContent = Utils.formatarMoeda(totalEntradas);
                document.getElementById('totalSaidas').textContent = Utils.formatarMoeda(totalSaidas);
                document.getElementById('saldoAtual').textContent = Utils.formatarMoeda(saldo);
                
                // Colorir saldo
                const saldoCard = document.getElementById('saldoAtual')?.closest('.stat-card');
                if (saldoCard) {
                    saldoCard.className = saldo >= 0 ? 'stat-card success' : 'stat-card danger';
                }
                
                // Atualizar tabela
                const tbody = document.querySelector('#tabelaFluxoCaixa tbody');
                
                if (tbody) {
                    if (movimentacoes.length === 0) {
                        tbody.innerHTML = '<tr><td colspan="6" class="text-center text-muted">Nenhuma movimentação encontrada</td></tr>';
                    } else {
                        tbody.innerHTML = movimentacoes
                            .sort((a, b) => new Date(b.data) - new Date(a.data))
                            .map(m => `
                                <tr>
                                    <td>${Utils.formatarData(m.data)}</td>
                                    <td>${m.descricao}</td>
                                    <td>${m.categoria}</td>
                                    <td>
                                        <span class="badge badge-${m.tipo === 'entrada' ? 'success' : 'danger'}">
                                            ${m.tipo === 'entrada' ? 'Entrada' : 'Saída'}
                                        </span>
                                    </td>
                                    <td>${Utils.formatarMoeda(m.valor)}</td>
                                    <td>
                                        <button class="btn btn-sm btn-warning" onclick="FluxoCaixa.editarMovimentacao(${m.id})">✏️</button>
                                        <button class="btn btn-sm btn-danger" onclick="FluxoCaixa.apagarMovimentacao(${m.id})">🗑️</button>
                                    </td>
                                </tr>
                            `).join('');
                    }
                }
            },

            editarMovimentacao(id) {
                const mov = PossattoSystem.dados.movimentacoes.find(m => m.id === id);
                if (!mov) return;
                
                document.getElementById('tipoMovimentacao').value = mov.tipo;
                document.getElementById('tituloModalFluxo').textContent = 
                    mov.tipo === 'entrada' ? '⬆️ Editar Entrada' : '⬇️ Editar Saída';
                document.getElementById('dataMovimentacao').value = mov.data;
                document.getElementById('descricaoMovimentacao').value = mov.descricao;
                document.getElementById('valorMovimentacao').value = mov.valor;
                document.getElementById('categoriaMovimentacao').value = mov.categoria;
                
                // Remover antiga ao salvar
                document.getElementById('formFluxo').onsubmit = (e) => {
                    e.preventDefault();
                    PossattoSystem.dados.movimentacoes = 
                        PossattoSystem.dados.movimentacoes.filter(m => m.id !== id);
                    this.salvarMovimentacao(e);
                    document.getElementById('formFluxo').onsubmit = this.salvarMovimentacao;
                };
                
                Modal.abrir('modalFluxo');
            },

            apagarMovimentacao(id) {
                if (!Modal.confirmar('Deseja realmente apagar esta movimentação?')) return;
                
                PossattoSystem.dados.movimentacoes = 
                    PossattoSystem.dados.movimentacoes.filter(m => m.id !== id);
                
                Sistema.salvarDados();
                this.atualizar();
                Utils.mostrarAlerta('🗑️ Movimentação removida!', 'warning');
            }
        };

        // ==================== MÓDULO FOLHA DE PAGAMENTO ====================
        const FolhaPagamento = {
            abrirModalFuncionario() {
                // Calcular custo total ao digitar
                const inputs = ['salarioBruto', 'inssPercent', 'valeTransporte', 'valeRefeicao', 
                               'outrosBeneficios', 'encargosAdicionais'];
                inputs.forEach(id => {
                    const element = document.getElementById(id);
                    if (element) {
                        element.addEventListener('input', () => this.calcularCustoTotal());
                    }
                });
                
                Modal.abrir('modalFuncionario');
            },

            calcularCustoTotal() {
                const salarioBruto = parseFloat(document.getElementById('salarioBruto').value) || 0;
                const inssPercent = parseFloat(document.getElementById('inssPercent').value) || 0;
                const valeTransporte = parseFloat(document.getElementById('valeTransporte').value) || 0;
                const valeRefeicao = parseFloat(document.getElementById('valeRefeicao').value) || 0;
                const outrosBeneficios = parseFloat(document.getElementById('outrosBeneficios').value) || 0;
                const encargosAdicionais = parseFloat(document.getElementById('encargosAdicionais').value) || 0;
                
                const inss = salarioBruto * (inssPercent / 100);
                const beneficios = valeTransporte + valeRefeicao + outrosBeneficios;
                const subtotal = salarioBruto + inss + beneficios;
                const encargos = subtotal * (encargosAdicionais / 100);
                const custoTotal = subtotal + encargos;
                
                document.getElementById('custoTotalFuncionario').value = Utils.formatarMoeda(custoTotal);
            },

            salvarFuncionario(event) {
                event.preventDefault();
                
                const salarioBruto = parseFloat(document.getElementById('salarioBruto').value) || 0;
                const inssPercent = parseFloat(document.getElementById('inssPercent').value) || 0;
                const valeTransporte = parseFloat(document.getElementById('valeTransporte').value) || 0;
                const valeRefeicao = parseFloat(document.getElementById('valeRefeicao').value) || 0;
                const outrosBeneficios = parseFloat(document.getElementById('outrosBeneficios').value) || 0;
                const encargosAdicionais = parseFloat(document.getElementById('encargosAdicionais').value) || 0;
                
                const inss = salarioBruto * (inssPercent / 100);
                const beneficios = valeTransporte + valeRefeicao + outrosBeneficios;
                const subtotal = salarioBruto + inss + beneficios;
                const encargos = subtotal * (encargosAdicionais / 100);
                const custoTotal = subtotal + encargos;
                
                const novoFuncionario = {
                    id: Utils.gerarId(),
                    nome: document.getElementById('nomeFuncionario').value,
                    cpf: document.getElementById('cpfFuncionario').value,
                    cargo: document.getElementById('cargoFuncionario').value,
                    salarioBruto: salarioBruto,
                    inssPercent: inssPercent,
                    inss: inss,
                    valeTransporte: valeTransporte,
                    valeRefeicao: valeRefeicao,
                    outrosBeneficios: outrosBeneficios,
                    beneficios: beneficios,
                    encargosAdicionais: encargosAdicionais,
                    encargos: encargos,
                    custoTotal: custoTotal
                };
                
                PossattoSystem.dados.funcionarios.push(novoFuncionario);
                Sistema.salvarDados();
                Modal.fechar('modalFuncionario');
                Utils.mostrarAlerta('✅ Funcionário cadastrado!', 'success');
                this.atualizar();
            },

            fecharFolha() {
                if (!Modal.confirmar('Deseja fechar a folha do mês atual e lançar os custos?')) return;
                
                const hoje = new Date();
                const mes = hoje.toLocaleDateString('pt-BR', { month: 'long', year: 'numeric' });
                
                let lancados = 0;
                
                PossattoSystem.dados.funcionarios.forEach(func => {
                    // Lançar como despesa
                    PossattoSystem.dados.despesas.push({
                        id: Utils.gerarId(),
                        tipo: 'despesa',
                        data: hoje.toISOString().split('T')[0],
                        descricao: `Folha ${func.nome} - ${mes}`,
                        valor: func.custoTotal,
                        categoria: 'mensal',
                        status: 'a-pagar'
                    });
                    
                    // Lançar no fluxo de caixa
                    PossattoSystem.dados.movimentacoes.push({
                        id: Utils.gerarId(),
                        tipo: 'saida',
                        data: hoje.toISOString().split('T')[0],
                        descricao: `Folha ${func.nome} - ${mes}`,
                        valor: func.custoTotal,
                        categoria: func.cargo
                    });
                    
                    lancados++;
                });
                
                if (lancados > 0) {
                    Sistema.salvarDados();
                    Utils.mostrarAlerta(`✅ Folha fechada! ${lancados} lançamento(s) criado(s).`, 'success');
                } else {
                    Utils.mostrarAlerta('⚠️ Nenhum funcionário cadastrado', 'warning');
                }
            },

            renderizar() {
                const container = document.getElementById('listaFuncionarios');
                if (!container) return;
                
                const funcionarios = PossattoSystem.dados.funcionarios;
                
                if (funcionarios.length === 0) {
                    container.innerHTML = '<div class="empty-state"><p>Nenhum funcionário cadastrado ainda.</p></div>';
                    return;
                }
                
                container.innerHTML = funcionarios.map(func => `
                    <div class="funcionario-card">
                        <div class="funcionario-header">
                            <h5>${func.nome}</h5>
                            <div>
                                <button class="btn btn-sm btn-warning" onclick="FolhaPagamento.editarFuncionario(${func.id})">✏️</button>
                                <button class="btn btn-sm btn-danger" onclick="FolhaPagamento.apagarFuncionario(${func.id})">🗑️</button>
                            </div>
                        </div>
                        <div class="funcionario-info">
                            <div class="info-item">
                                <div class="info-label">Cargo</div>
                                <div class="info-value">${func.cargo}</div>
                            </div>
                            <div class="info-item">
                                <div class="info-label">CPF</div>
                                <div class="info-value">${func.cpf}</div>
                            </div>
                            <div class="info-item">
                                <div class="info-label">Salário Bruto</div>
                                <div class="info-value">${Utils.formatarMoeda(func.salarioBruto)}</div>
                            </div>
                            <div class="info-item">
                                <div class="info-label">INSS</div>
                                <div class="info-value">${Utils.formatarMoeda(func.inss)}</div>
                            </div>
                            <div class="info-item">
                                <div class="info-label">Benefícios</div>
                                <div class="info-value">${Utils.formatarMoeda(func.beneficios)}</div>
                            </div>
                            <div class="info-item">
                                <div class="info-label">Custo Total</div>
                                <div class="info-value">${Utils.formatarMoeda(func.custoTotal)}</div>
                            </div>
                        </div>
                    </div>
                `).join('');
            },

            editarFuncionario(id) {
                const func = PossattoSystem.dados.funcionarios.find(f => f.id === id);
                if (!func) return;
                
                document.getElementById('nomeFuncionario').value = func.nome;
                document.getElementById('cpfFuncionario').value = func.cpf;
                document.getElementById('cargoFuncionario').value = func.cargo;
                document.getElementById('salarioBruto').value = func.salarioBruto;
                document.getElementById('inssPercent').value = func.inssPercent;
                document.getElementById('valeTransporte').value = func.valeTransporte;
                document.getElementById('valeRefeicao').value = func.valeRefeicao;
                document.getElementById('outrosBeneficios').value = func.outrosBeneficios;
                document.getElementById('encargosAdicionais').value = func.encargosAdicionais;
                
                this.calcularCustoTotal();
                
                // Remover antigo ao salvar
                document.getElementById('formFuncionario').onsubmit = (e) => {
                    e.preventDefault();
                    PossattoSystem.dados.funcionarios = 
                        PossattoSystem.dados.funcionarios.filter(f => f.id !== id);
                    this.salvarFuncionario(e);
                    document.getElementById('formFuncionario').onsubmit = this.salvarFuncionario;
                };
                
                Modal.abrir('modalFuncionario');
            },

            apagarFuncionario(id) {
                if (!Modal.confirmar('Deseja realmente apagar este funcionário?')) return;
                
                PossattoSystem.dados.funcionarios = 
                    PossattoSystem.dados.funcionarios.filter(f => f.id !== id);
                
                Sistema.salvarDados();
                this.atualizar();
                Utils.mostrarAlerta('🗑️ Funcionário removido!', 'warning');
            },

            criarGrafico() {
                const canvas = document.getElementById('graficoFolha');
                if (!canvas) return;
                
                const ctx = canvas.getContext('2d');
                
                // Destruir gráfico existente
                const existingChart = Chart.getChart(canvas);
                if (existingChart) existingChart.destroy();
                
                const funcionarios = PossattoSystem.dados.funcionarios;
                
                if (funcionarios.length === 0) return;
                
                new Chart(ctx, {
                    type: 'pie',
                    data: {
                        labels: funcionarios.map(f => f.nome),
                        datasets: [{
                            data: funcionarios.map(f => f.custoTotal),
                            backgroundColor: [
                                'rgba(52, 152, 219, 0.8)',
                                'rgba(46, 204, 113, 0.8)',
                                'rgba(155, 89, 182, 0.8)',
                                'rgba(241, 196, 15, 0.8)',
                                'rgba(231, 76, 60, 0.8)',
                                'rgba(149, 165, 166, 0.8)'
                            ]
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                position: 'bottom'
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        const label = context.label || '';
                                        const value = Utils.formatarMoeda(context.parsed);
                                        const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                        const percentage = ((context.parsed / total) * 100).toFixed(1);
                                        return `${label}: ${value} (${percentage}%)`;
                                    }
                                }
                            }
                        }
                    }
                });
            },

            atualizar() {
                const funcionarios = PossattoSystem.dados.funcionarios;
                
                // Calcular totais
                const numFuncionarios = funcionarios.length;
                const totalSalarios = funcionarios.reduce((sum, f) => sum + f.salarioBruto, 0);
                const totalEncargos = funcionarios.reduce((sum, f) => sum + f.inss + f.encargos, 0);
                const custoTotalFolha = funcionarios.reduce((sum, f) => sum + f.custoTotal, 0);
                
                // Atualizar KPIs
                document.getElementById('numFuncionarios').textContent = numFuncionarios;
                document.getElementById('totalSalarios').textContent = Utils.formatarMoeda(totalSalarios);
                document.getElementById('totalEncargos').textContent = Utils.formatarMoeda(totalEncargos);
                document.getElementById('custoTotalFolha').textContent = Utils.formatarMoeda(custoTotalFolha);
                
                this.renderizar();
                this.criarGrafico();
            }
        };

        // ==================== MÓDULO DASHBOARD ====================
        const Dashboard = {
            atualizar() {
                const periodo = document.getElementById('periodoDashboard')?.value || 'mes';
                const hoje = new Date();
                let dataInicio;
                
                switch (periodo) {
                    case 'mes':
                        dataInicio = new Date(hoje.getFullYear(), hoje.getMonth(), 1);
                        break;
                    case 'trimestre':
                        dataInicio = new Date(hoje.getFullYear(), hoje.getMonth() - 3, 1);
                        break;
                    case 'semestre':
                        dataInicio = new Date(hoje.getFullYear(), hoje.getMonth() - 6, 1);
                        break;
                    case 'ano':
                        dataInicio = new Date(hoje.getFullYear(), 0, 1);
                        break;
                }
                
                // Filtrar dados por período
                const receitasPeriodo = PossattoSystem.dados.receitas.filter(r => 
                    r.data && new Date(r.data) >= dataInicio
                );
                const despesasPeriodo = PossattoSystem.dados.despesas.filter(d => 
                    d.data && new Date(d.data) >= dataInicio
                );
                const projetosPeriodo = PossattoSystem.dados.projetos.filter(p => 
                    p.dataInicio && new Date(p.dataInicio) >= dataInicio
                );
                const orcamentosPeriodo = PossattoSystem.dados.orcamentos.filter(o => 
                    o.data && new Date(o.data) >= dataInicio
                );
                
                // Calcular indicadores financeiros
                const receitaTotal = receitasPeriodo.reduce((sum, r) => sum + r.valor, 0);
                const despesaTotal = despesasPeriodo.reduce((sum, d) => sum + d.valor, 0);
                const lucroBruto = receitaTotal - despesaTotal;
                const margemContribuicao = receitaTotal > 0 ? (lucroBruto / receitaTotal * 100) : 0;
                
                // Atualizar KPIs financeiros
                document.getElementById('lucroBruto').textContent = Utils.formatarMoeda(lucroBruto);
                document.getElementById('margemContribuicaoDash').textContent = `${margemContribuicao.toFixed(1)}%`;
                document.getElementById('receitaTotalDash').textContent = Utils.formatarMoeda(receitaTotal);
                
                // Meta mensal
                const metaMensal = PossattoSystem.config.metaMensal || 0;
                document.getElementById('metaMensal').textContent = Utils.formatarMoeda(metaMensal);
                
                // Indicadores de projetos
                const projetosEmAndamento = PossattoSystem.dados.projetos.filter(p => p.status === 'em-andamento').length;
                const projetosConcluidosPeriodo = projetosPeriodo.filter(p => p.status === 'concluido').length;
                const ticketMedio = projetosPeriodo.length > 0 ?
                    projetosPeriodo.reduce((sum, p) => sum + p.valorTotal, 0) / projetosPeriodo.length : 0;
                
                document.getElementById('projetosAndamentoDash').textContent = projetosEmAndamento;
                document.getElementById('projetosConcluidosPeriodo').textContent = projetosConcluidosPeriodo;
                document.getElementById('ticketMedio').textContent = Utils.formatarMoeda(ticketMedio);
                
                // Taxa de conversão
                const orcamentosAprovados = orcamentosPeriodo.filter(o => o.status === 'aprovado').length;
                const taxaConversao = orcamentosPeriodo.length > 0 ?
                    (orcamentosAprovados / orcamentosPeriodo.length * 100) : 0;
                document.getElementById('taxaConversao').textContent = `${taxaConversao.toFixed(1)}%`;
                
                // Criar gráfico
                this.criarGraficoEvolucao();
                
                // Atualizar resumo
                this.atualizarResumo(receitasPeriodo, despesasPeriodo, projetosPeriodo, orcamentosPeriodo, lucroBruto);
            },

            criarGraficoEvolucao() {
                const canvas = document.getElementById('graficoEvolucao');
                if (!canvas) return;
                
                const ctx = canvas.getContext('2d');
                
                // Destruir gráfico anterior
                const existingChart = Chart.getChart(canvas);
                if (existingChart) existingChart.destroy();
                
                // Agrupar por mês
                const meses = {};
                const hoje = new Date();
                
                // Últimos 6 meses
                for (let i = 5; i >= 0; i--) {
                    const data = new Date(hoje.getFullYear(), hoje.getMonth() - i, 1);
                    const mes = data.toISOString().substring(0, 7);
                    meses[mes] = { receitas: 0, despesas: 0 };
                }
                
                PossattoSystem.dados.receitas.forEach(r => {
                    if (r.data) {
                        const mes = r.data.substring(0, 7);
                        if (meses[mes]) meses[mes].receitas += r.valor;
                    }
                });
                
                PossattoSystem.dados.despesas.forEach(d => {
                    if (d.data) {
                        const mes = d.data.substring(0, 7);
                        if (meses[mes]) meses[mes].despesas += d.valor;
                    }
                });
                
                const labels = Object.keys(meses);
                const dataReceitas = labels.map(mes => meses[mes].receitas);
                const dataDespesas = labels.map(mes => meses[mes].despesas);
                
                new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: labels.map(mes => {
                            const [ano, m] = mes.split('-');
                            return `${m}/${ano}`;
                        }),
                        datasets: [{
                            label: 'Receitas (R$)',
                            data: dataReceitas,
                            borderColor: 'rgb(39, 174, 96)',
                            backgroundColor: 'rgba(39, 174, 96, 0.1)',
                            tension: 0.4
                        }, {
                            label: 'Despesas (R$)',
                            data: dataDespesas,
                            borderColor: 'rgb(231, 76, 60)',
                            backgroundColor: 'rgba(231, 76, 60, 0.1)',
                            tension: 0.4
                        }]
                    },
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            title: {
                                display: true,
                                text: 'Evolução Financeira'
                            }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    callback: function(value) {
                                        return Utils.formatarMoeda(value);
                                    }
                                }
                            }
                        }
                    }
                });
            },

            atualizarResumo(receitasPeriodo, despesasPeriodo, projetosPeriodo, orcamentosPeriodo, lucroBruto) {
                const receitaTotal = receitasPeriodo.reduce((sum, r) => sum + r.valor, 0);
                const despesaTotal = despesasPeriodo.reduce((sum, d) => sum + d.valor, 0);
                
                // Valores dos projetos
                const valorProjetosAndamento = PossattoSystem.dados.projetos
                    .filter(p => p.status === 'em-andamento')
                    .reduce((sum, p) => sum + p.valorTotal, 0);
                
                const valorProjetosConcluidos = PossattoSystem.dados.projetos
                    .filter(p => p.status === 'concluido')
                    .reduce((sum, p) => sum + p.valorTotal, 0);
                
                // Atualizar elementos
                document.getElementById('resumoReceitas').textContent = Utils.formatarMoeda(receitaTotal);
                document.getElementById('resumoDespesas').textContent = Utils.formatarMoeda(despesaTotal);
                document.getElementById('resumoResultado').textContent = 
                    `${Utils.formatarMoeda(lucroBruto)} ${lucroBruto >= 0 ? '(Lucro)' : '(Prejuízo)'}`;
                
                document.getElementById('transacoesReceita').textContent = receitasPeriodo.length;
                document.getElementById('transacoesDespesa').textContent = despesasPeriodo.length;
                document.getElementById('totalTransacoes').textContent = receitasPeriodo.length + despesasPeriodo.length;
                
                document.getElementById('projetosEmAndamento').textContent = 
                    projetosPeriodo.filter(p => p.status === 'em-andamento').length;
                document.getElementById('projetosConcluidosDash').textContent = 
                    projetosPeriodo.filter(p => p.status === 'concluido').length;
                document.getElementById('projetosCancelados').textContent = 
                    projetosPeriodo.filter(p => p.status === 'cancelado').length;
                
                document.getElementById('valorProjetosAndamento').textContent = 
                    Utils.formatarMoeda(valorProjetosAndamento);
                document.getElementById('valorProjetosConcluidos').textContent = 
                    Utils.formatarMoeda(valorProjetosConcluidos);
                
                document.getElementById('orcamentosAguardando').textContent = 
                    orcamentosPeriodo.filter(o => o.status === 'aguardando').length;
                document.getElementById('orcamentosAprovados').textContent = 
                    orcamentosPeriodo.filter(o => o.status === 'aprovado').length;
                document.getElementById('orcamentosReprovados').textContent = 
                    orcamentosPeriodo.filter(o => o.status === 'reprovado').length;
            },

            adicionarMeta() {
                const metaStr = prompt('Digite a meta mensal (R$):');
                if (metaStr && !isNaN(parseFloat(metaStr))) {
                    PossattoSystem.config.metaMensal = parseFloat(metaStr);
                    Sistema.salvarDados();
                    document.getElementById('metaMensal').textContent = 
                        Utils.formatarMoeda(PossattoSystem.config.metaMensal);
                    Utils.mostrarAlerta('🎯 Meta definida!', 'success');
                }
            },

            exportarPainel() {
                if (window.jsPDF) {
                    const { jsPDF } = window.jsPDF;
                    const doc = new jsPDF();
                    
                    // Título
                    doc.setFontSize(20);
                    doc.text('Dashboard Analítico - Sistema Possatto PRO', 20, 20);
                    
                    // Data do relatório
                    doc.setFontSize(12);
                    doc.text(`Data: ${Utils.formatarData(new Date())}`, 20, 30);
                    doc.text(`Período: ${document.getElementById('periodoDashboard').selectedOptions[0].text}`, 20, 40);
                    
                    // Indicadores
                    let y = 60;
                    doc.setFontSize(14);
                    doc.text('Indicadores Financeiros', 20, y);
                    y += 10;
                    
                    doc.setFontSize(10);
                    const indicadores = [
                        ['Lucro Bruto', document.getElementById('lucroBruto').textContent],
                        ['Margem de Contribuição', document.getElementById('margemContribuicaoDash').textContent],
                        ['Meta Mensal', document.getElementById('metaMensal').textContent],
                        ['Receita Total', document.getElementById('receitaTotalDash').textContent]
                    ];
                    
                    indicadores.forEach(([label, valor]) => {
                        doc.text(`${label}: ${valor}`, 25, y);
                        y += 7;
                    });
                    
                    // Indicadores de Projetos
                    y += 10;
                    doc.setFontSize(14);
                    doc.text('Indicadores de Projetos', 20, y);
                    y += 10;
                    
                    doc.setFontSize(10);
                    const projetos = [
                        ['Em Andamento', document.getElementById('projetosAndamentoDash').textContent],
                        ['Concluídos no Período', document.getElementById('projetosConcluidosPeriodo').textContent],
                        ['Ticket Médio', document.getElementById('ticketMedio').textContent],
                        ['Taxa de Conversão', document.getElementById('taxaConversao').textContent]
                    ];
                    
                    projetos.forEach(([label, valor]) => {
                        doc.text(`${label}: ${valor}`, 25, y);
                        y += 7;
                    });
                    
                    // Resumo Financeiro
                    y += 10;
                    doc.setFontSize(14);
                    doc.text('Resumo Financeiro', 20, y);
                    y += 10;
                    
                    doc.setFontSize(10);
                    const resumo = [
                        ['Total de Receitas', document.getElementById('resumoReceitas').textContent],
                        ['Total de Despesas', document.getElementById('resumoDespesas').textContent],
                        ['Resultado', document.getElementById('resumoResultado').textContent]
                    ];
                    
                    resumo.forEach(([label, valor]) => {
                        doc.text(`${label}: ${valor}`, 25, y);
                        y += 7;
                    });
                    
                    // Salvar PDF
                    doc.save(`dashboard-possatto-${Utils.formatarDataArquivo()}.pdf`);
                    Utils.mostrarAlerta('📊 Dashboard exportado!', 'success');
                } else {
                    Utils.mostrarAlerta('❌ Biblioteca PDF não carregada', 'danger');
                }
            }
        };

        // ==================== INICIALIZAÇÃO DO SISTEMA ====================
        window.addEventListener('DOMContentLoaded', () => {
            Sistema.init();
        });

        // Expor módulos globalmente para uso nos handlers HTML
        window.Sistema = Sistema;
        window.Utils = Utils;
        window.Modal = Modal;
        window.Empresa = Empresa;
        window.BaseMateriais = BaseMateriais;
        window.Ambiente = Ambiente;
        window.Movel = Movel;
        window.Orcamento = Orcamento;
        window.Projeto = Projeto;
        window.Financeiro = Financeiro;
        window.FluxoCaixa = FluxoCaixa;
        window.FolhaPagamento = FolhaPagamento;
        window.Dashboard = Dashboard;
    </script>
</body>
</html>
